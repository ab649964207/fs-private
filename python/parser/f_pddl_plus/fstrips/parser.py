# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .listener import FunctionalStripsListener
    from .visitor import FunctionalStripsVisitor
else:
    from listener import FunctionalStripsListener
    from visitor import FunctionalStripsVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0090")
        buf.write("\u048a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\3\2\3\2\5\2\u00c1\n\2\3\3\3\3\3\3\3\3\5\3\u00c7\n")
        buf.write("\3\3\3\5\3\u00ca\n\3\3\3\5\3\u00cd\n\3\3\3\5\3\u00d0\n")
        buf.write("\3\3\3\5\3\u00d3\n\3\3\3\5\3\u00d6\n\3\3\3\7\3\u00d9\n")
        buf.write("\3\f\3\16\3\u00dc\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u00e3\n")
        buf.write("\4\f\4\16\4\u00e6\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6")
        buf.write("\3\6\3\6\6\6\u00f2\n\6\r\6\16\6\u00f3\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\b\5\b\u0100\n\b\3\t\3\t\5\t\u0104")
        buf.write("\n\t\3\n\7\n\u0107\n\n\f\n\16\n\u010a\13\n\3\13\3\13\6")
        buf.write("\13\u010e\n\13\r\13\16\13\u010f\3\13\3\13\5\13\u0114\n")
        buf.write("\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\6\r\u011e\n\r\r\r")
        buf.write("\16\r\u011f\3\r\3\r\3\r\5\r\u0125\n\r\3\16\3\16\5\16\u0129")
        buf.write("\n\16\3\17\3\17\3\17\7\17\u012e\n\17\f\17\16\17\u0131")
        buf.write("\13\17\3\17\3\17\3\20\6\20\u0136\n\20\r\20\16\20\u0137")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\24\3\24\3\24\7\24\u014c\n\24\f")
        buf.write("\24\16\24\u014f\13\24\3\24\3\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\26\3\26\3\27\7\27\u015b\n\27\f\27\16\27\u015e\13")
        buf.write("\27\3\27\6\27\u0161\n\27\r\27\16\27\u0162\3\27\7\27\u0166")
        buf.write("\n\27\f\27\16\27\u0169\13\27\5\27\u016b\n\27\3\30\6\30")
        buf.write("\u016e\n\30\r\30\16\30\u016f\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u017b\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3!\3!\3!\5!\u01aa\n!\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u01b0\n\"\f\"\16\"\u01b3\13\"\3\"\3\"\3\"\3\"")
        buf.write("\7\"\u01b9\n\"\f\"\16\"\u01bc\13\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u01dc")
        buf.write("\n\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3%\7%\u01ed")
        buf.write("\n%\f%\16%\u01f0\13%\3%\3%\3&\3&\3&\3&\3&\5&\u01f9\n&")
        buf.write("\3\'\3\'\3\'\7\'\u01fe\n\'\f\'\16\'\u0201\13\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0210")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3*\3")
        buf.write("*\3*\7*\u0224\n*\f*\16*\u0227\13*\3*\3*\5*\u022b\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\5,\u0246\n,\3-\3-\3-\3-\3-\3-\5-\u024e")
        buf.write("\n-\3-\3-\3-\3-\5-\u0254\n-\5-\u0256\n-\3.\3.\3.\3.\7")
        buf.write(".\u025c\n.\f.\16.\u025f\13.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\5.\u026a\n.\3/\3/\3/\3/\5/\u0270\n/\3/\3/\3/\5/\u0275")
        buf.write("\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u0283\n\60\3\61\3\61\3\62\3\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\5\64\u0292\n\64")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\3\65\5\65\u02a3\n\65\3\66\3\66\3\66\3")
        buf.write("\66\3\66\5\66\u02aa\n\66\3\67\3\67\3\67\3\67\5\67\u02b0")
        buf.write("\n\67\38\38\38\38\58\u02b6\n8\39\39\39\79\u02bb\n9\f9")
        buf.write("\169\u02be\139\39\39\3:\3:\3:\7:\u02c5\n:\f:\16:\u02c8")
        buf.write("\13:\3:\3:\5:\u02cc\n:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\5;\u02dd\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5<\u02f7\n")
        buf.write("<\3=\3=\3=\7=\u02fc\n=\f=\16=\u02ff\13=\3=\3=\5=\u0303")
        buf.write("\n=\3>\3>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3D\6D\u0314")
        buf.write("\nD\rD\16D\u0315\3D\3D\3D\3D\3D\5D\u031d\nD\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u032b\nE\3F\3F\3G\3G\5G\u0331")
        buf.write("\nG\3H\3H\3H\7H\u0336\nH\fH\16H\u0339\13H\3H\3H\3H\3H")
        buf.write("\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\5H\u0351\nH\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\5I\u0365\nI\3J\3J\3J\3J\3J\3J\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\5K\u0374\nK\3K\3K\3K\3K\5K\u037a\nK\3L\3L\3")
        buf.write("L\3L\3L\5L\u0381\nL\3L\5L\u0384\nL\3L\3L\3L\7L\u0389\n")
        buf.write("L\fL\16L\u038c\13L\3L\3L\3M\3M\3M\5M\u0393\nM\3N\3N\3")
        buf.write("N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\6Q\u03a7")
        buf.write("\nQ\rQ\16Q\u03a8\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3S\3S\3S\7S\u03bb\nS\fS\16S\u03be\13S\3S\3S\3T\3T\3")
        buf.write("T\5T\u03c5\nT\3U\3U\3U\7U\u03ca\nU\fU\16U\u03cd\13U\3")
        buf.write("U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\5V\u03e4\nV\3W\3W\3W\3W\3W\3W\5W\u03ec\nW\3X\3")
        buf.write("X\3X\7X\u03f1\nX\fX\16X\u03f4\13X\3X\3X\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\7[\u0405\n[\f[\16[\u0408\13")
        buf.write("[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\5[\u0416\n[\3[\3")
        buf.write("[\3[\3[\6[\u041c\n[\r[\16[\u041d\5[\u0420\n[\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3]\3]\3^\3^\3^\3^\3^\3^\5^\u0430\n^\3_")
        buf.write("\3_\3_\6_\u0435\n_\r_\16_\u0436\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\3_\3_\3_\3_\3_\3_\3_\3_\6_\u0481\n_\r_\16_\u0482")
        buf.write("\3_\3_\3_\5_\u0488\n_\3_\2\2`\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\2\f\3\2Z[\3")
        buf.write("\2&\'\5\2\16\16**.\60\4\2\16\16\61\67\4\2**..\4\2\36\36")
        buf.write("8;\4\2,,<?\3\2>?\4\2\36\36:;\3\2LM\u04b2\2\u00c0\3\2\2")
        buf.write("\2\4\u00c2\3\2\2\2\6\u00df\3\2\2\2\b\u00e9\3\2\2\2\n\u00ee")
        buf.write("\3\2\2\2\f\u00f7\3\2\2\2\16\u00ff\3\2\2\2\20\u0103\3\2")
        buf.write("\2\2\22\u0108\3\2\2\2\24\u0113\3\2\2\2\26\u0115\3\2\2")
        buf.write("\2\30\u0124\3\2\2\2\32\u0128\3\2\2\2\34\u012a\3\2\2\2")
        buf.write("\36\u0135\3\2\2\2 \u013c\3\2\2\2\"\u0141\3\2\2\2$\u0143")
        buf.write("\3\2\2\2&\u0148\3\2\2\2(\u0152\3\2\2\2*\u0157\3\2\2\2")
        buf.write(",\u016a\3\2\2\2.\u016d\3\2\2\2\60\u017a\3\2\2\2\62\u017c")
        buf.write("\3\2\2\2\64\u0186\3\2\2\2\66\u0191\3\2\2\28\u019b\3\2")
        buf.write("\2\2:\u019d\3\2\2\2<\u019f\3\2\2\2>\u01a1\3\2\2\2@\u01a9")
        buf.write("\3\2\2\2B\u01db\3\2\2\2D\u01dd\3\2\2\2F\u01e3\3\2\2\2")
        buf.write("H\u01e9\3\2\2\2J\u01f8\3\2\2\2L\u020f\3\2\2\2N\u0211\3")
        buf.write("\2\2\2P\u021b\3\2\2\2R\u022a\3\2\2\2T\u022c\3\2\2\2V\u0245")
        buf.write("\3\2\2\2X\u0255\3\2\2\2Z\u0269\3\2\2\2\\\u0274\3\2\2\2")
        buf.write("^\u0282\3\2\2\2`\u0284\3\2\2\2b\u0286\3\2\2\2d\u0288\3")
        buf.write("\2\2\2f\u0291\3\2\2\2h\u02a2\3\2\2\2j\u02a9\3\2\2\2l\u02af")
        buf.write("\3\2\2\2n\u02b5\3\2\2\2p\u02b7\3\2\2\2r\u02cb\3\2\2\2")
        buf.write("t\u02dc\3\2\2\2v\u02f6\3\2\2\2x\u0302\3\2\2\2z\u0304\3")
        buf.write("\2\2\2|\u0306\3\2\2\2~\u0308\3\2\2\2\u0080\u030a\3\2\2")
        buf.write("\2\u0082\u030c\3\2\2\2\u0084\u030e\3\2\2\2\u0086\u031c")
        buf.write("\3\2\2\2\u0088\u032a\3\2\2\2\u008a\u032c\3\2\2\2\u008c")
        buf.write("\u0330\3\2\2\2\u008e\u0350\3\2\2\2\u0090\u0364\3\2\2\2")
        buf.write("\u0092\u0366\3\2\2\2\u0094\u0379\3\2\2\2\u0096\u037b\3")
        buf.write("\2\2\2\u0098\u0392\3\2\2\2\u009a\u0394\3\2\2\2\u009c\u0399")
        buf.write("\3\2\2\2\u009e\u039e\3\2\2\2\u00a0\u03a3\3\2\2\2\u00a2")
        buf.write("\u03ac\3\2\2\2\u00a4\u03b7\3\2\2\2\u00a6\u03c4\3\2\2\2")
        buf.write("\u00a8\u03c6\3\2\2\2\u00aa\u03e3\3\2\2\2\u00ac\u03eb\3")
        buf.write("\2\2\2\u00ae\u03ed\3\2\2\2\u00b0\u03f7\3\2\2\2\u00b2\u03fc")
        buf.write("\3\2\2\2\u00b4\u041f\3\2\2\2\u00b6\u0421\3\2\2\2\u00b8")
        buf.write("\u0427\3\2\2\2\u00ba\u042f\3\2\2\2\u00bc\u0487\3\2\2\2")
        buf.write("\u00be\u00c1\5\4\3\2\u00bf\u00c1\5\u0096L\2\u00c0\u00be")
        buf.write("\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\3\3\2\2\2\u00c2\u00c3")
        buf.write("\7\3\2\2\u00c3\u00c4\7\4\2\2\u00c4\u00c6\5\b\5\2\u00c5")
        buf.write("\u00c7\5\n\6\2\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2")
        buf.write("\u00c7\u00c9\3\2\2\2\u00c8\u00ca\5\f\7\2\u00c9\u00c8\3")
        buf.write("\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00cd")
        buf.write("\5$\23\2\u00cc\u00cb\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd")
        buf.write("\u00cf\3\2\2\2\u00ce\u00d0\5&\24\2\u00cf\u00ce\3\2\2\2")
        buf.write("\u00cf\u00d0\3\2\2\2\u00d0\u00d2\3\2\2\2\u00d1\u00d3\5")
        buf.write("\34\17\2\u00d2\u00d1\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3")
        buf.write("\u00d5\3\2\2\2\u00d4\u00d6\5\6\4\2\u00d5\u00d4\3\2\2\2")
        buf.write("\u00d5\u00d6\3\2\2\2\u00d6\u00da\3\2\2\2\u00d7\u00d9\5")
        buf.write("\60\31\2\u00d8\u00d7\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da")
        buf.write("\u00d8\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00dd\3\2\2\2")
        buf.write("\u00dc\u00da\3\2\2\2\u00dd\u00de\7\5\2\2\u00de\5\3\2\2")
        buf.write("\2\u00df\u00e0\7\3\2\2\u00e0\u00e4\7\6\2\2\u00e1\u00e3")
        buf.write("\5\36\20\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4")
        buf.write("\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e7\3\2\2\2")
        buf.write("\u00e6\u00e4\3\2\2\2\u00e7\u00e8\7\5\2\2\u00e8\7\3\2\2")
        buf.write("\2\u00e9\u00ea\7\3\2\2\u00ea\u00eb\7\7\2\2\u00eb\u00ec")
        buf.write("\7Z\2\2\u00ec\u00ed\7\5\2\2\u00ed\t\3\2\2\2\u00ee\u00ef")
        buf.write("\7\3\2\2\u00ef\u00f1\7\b\2\2\u00f0\u00f2\7Y\2\2\u00f1")
        buf.write("\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f1\3\2\2\2")
        buf.write("\u00f3\u00f4\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\7")
        buf.write("\5\2\2\u00f6\13\3\2\2\2\u00f7\u00f8\7\3\2\2\u00f8\u00f9")
        buf.write("\7\t\2\2\u00f9\u00fa\5\24\13\2\u00fa\u00fb\7\5\2\2\u00fb")
        buf.write("\r\3\2\2\2\u00fc\u0100\7\n\2\2\u00fd\u0100\7\13\2\2\u00fe")
        buf.write("\u0100\7\f\2\2\u00ff\u00fc\3\2\2\2\u00ff\u00fd\3\2\2\2")
        buf.write("\u00ff\u00fe\3\2\2\2\u0100\17\3\2\2\2\u0101\u0104\5\16")
        buf.write("\b\2\u0102\u0104\7\r\2\2\u0103\u0101\3\2\2\2\u0103\u0102")
        buf.write("\3\2\2\2\u0104\21\3\2\2\2\u0105\u0107\7Z\2\2\u0106\u0105")
        buf.write("\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\23\3\2\2\2\u010a\u0108\3\2\2\2\u010b")
        buf.write("\u0114\5\22\n\2\u010c\u010e\5\26\f\2\u010d\u010c\3\2\2")
        buf.write("\2\u010e\u010f\3\2\2\2\u010f\u010d\3\2\2\2\u010f\u0110")
        buf.write("\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0112\5\22\n\2\u0112")
        buf.write("\u0114\3\2\2\2\u0113\u010b\3\2\2\2\u0113\u010d\3\2\2\2")
        buf.write("\u0114\25\3\2\2\2\u0115\u0116\7Z\2\2\u0116\u0117\5\22")
        buf.write("\n\2\u0117\u0118\7\16\2\2\u0118\u0119\5\30\r\2\u0119\27")
        buf.write("\3\2\2\2\u011a\u011b\7\3\2\2\u011b\u011d\7\17\2\2\u011c")
        buf.write("\u011e\5\32\16\2\u011d\u011c\3\2\2\2\u011e\u011f\3\2\2")
        buf.write("\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0121")
        buf.write("\3\2\2\2\u0121\u0122\7\5\2\2\u0122\u0125\3\2\2\2\u0123")
        buf.write("\u0125\5\32\16\2\u0124\u011a\3\2\2\2\u0124\u0123\3\2\2")
        buf.write("\2\u0125\31\3\2\2\2\u0126\u0129\7Z\2\2\u0127\u0129\5\20")
        buf.write("\t\2\u0128\u0126\3\2\2\2\u0128\u0127\3\2\2\2\u0129\33")
        buf.write("\3\2\2\2\u012a\u012b\7\3\2\2\u012b\u012f\7\20\2\2\u012c")
        buf.write("\u012e\5\36\20\2\u012d\u012c\3\2\2\2\u012e\u0131\3\2\2")
        buf.write("\2\u012f\u012d\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132")
        buf.write("\3\2\2\2\u0131\u012f\3\2\2\2\u0132\u0133\7\5\2\2\u0133")
        buf.write("\35\3\2\2\2\u0134\u0136\5 \21\2\u0135\u0134\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139\u013a\7\16\2\2\u013a\u013b")
        buf.write("\5\32\16\2\u013b\37\3\2\2\2\u013c\u013d\7\3\2\2\u013d")
        buf.write("\u013e\5\"\22\2\u013e\u013f\5,\27\2\u013f\u0140\7\5\2")
        buf.write("\2\u0140!\3\2\2\2\u0141\u0142\t\2\2\2\u0142#\3\2\2\2\u0143")
        buf.write("\u0144\7\3\2\2\u0144\u0145\7\21\2\2\u0145\u0146\5\24\13")
        buf.write("\2\u0146\u0147\7\5\2\2\u0147%\3\2\2\2\u0148\u0149\7\3")
        buf.write("\2\2\u0149\u014d\7\22\2\2\u014a\u014c\5(\25\2\u014b\u014a")
        buf.write("\3\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d")
        buf.write("\u014e\3\2\2\2\u014e\u0150\3\2\2\2\u014f\u014d\3\2\2\2")
        buf.write("\u0150\u0151\7\5\2\2\u0151\'\3\2\2\2\u0152\u0153\7\3\2")
        buf.write("\2\u0153\u0154\5*\26\2\u0154\u0155\5,\27\2\u0155\u0156")
        buf.write("\7\5\2\2\u0156)\3\2\2\2\u0157\u0158\t\2\2\2\u0158+\3\2")
        buf.write("\2\2\u0159\u015b\7^\2\2\u015a\u0159\3\2\2\2\u015b\u015e")
        buf.write("\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d")
        buf.write("\u016b\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u0161\5.\30\2")
        buf.write("\u0160\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0160\3")
        buf.write("\2\2\2\u0162\u0163\3\2\2\2\u0163\u0167\3\2\2\2\u0164\u0166")
        buf.write("\7^\2\2\u0165\u0164\3\2\2\2\u0166\u0169\3\2\2\2\u0167")
        buf.write("\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u016b\3\2\2\2")
        buf.write("\u0169\u0167\3\2\2\2\u016a\u015c\3\2\2\2\u016a\u0160\3")
        buf.write("\2\2\2\u016b-\3\2\2\2\u016c\u016e\7^\2\2\u016d\u016c\3")
        buf.write("\2\2\2\u016e\u016f\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0172\7\16\2\2\u0172")
        buf.write("\u0173\5\32\16\2\u0173/\3\2\2\2\u0174\u017b\5\62\32\2")
        buf.write("\u0175\u017b\5\66\34\2\u0176\u017b\5V,\2\u0177\u017b\5")
        buf.write("d\63\2\u0178\u017b\5\64\33\2\u0179\u017b\5N(\2\u017a\u0174")
        buf.write("\3\2\2\2\u017a\u0175\3\2\2\2\u017a\u0176\3\2\2\2\u017a")
        buf.write("\u0177\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u0179\3\2\2\2")
        buf.write("\u017b\61\3\2\2\2\u017c\u017d\7\3\2\2\u017d\u017e\7\23")
        buf.write("\2\2\u017e\u017f\58\35\2\u017f\u0180\7\24\2\2\u0180\u0181")
        buf.write("\7\3\2\2\u0181\u0182\5,\27\2\u0182\u0183\7\5\2\2\u0183")
        buf.write("\u0184\5> \2\u0184\u0185\7\5\2\2\u0185\63\3\2\2\2\u0186")
        buf.write("\u0187\7\3\2\2\u0187\u0188\7\25\2\2\u0188\u0189\5:\36")
        buf.write("\2\u0189\u018a\7\24\2\2\u018a\u018b\7\3\2\2\u018b\u018c")
        buf.write("\5,\27\2\u018c\u018d\7\5\2\2\u018d\u018e\7\26\2\2\u018e")
        buf.write("\u018f\5B\"\2\u018f\u0190\7\5\2\2\u0190\65\3\2\2\2\u0191")
        buf.write("\u0192\7\3\2\2\u0192\u0193\7\27\2\2\u0193\u0194\5<\37")
        buf.write("\2\u0194\u0195\7\24\2\2\u0195\u0196\7\3\2\2\u0196\u0197")
        buf.write("\5,\27\2\u0197\u0198\7\5\2\2\u0198\u0199\5> \2\u0199\u019a")
        buf.write("\7\5\2\2\u019a\67\3\2\2\2\u019b\u019c\7Z\2\2\u019c9\3")
        buf.write("\2\2\2\u019d\u019e\7Z\2\2\u019e;\3\2\2\2\u019f\u01a0\7")
        buf.write("Z\2\2\u01a0=\3\2\2\2\u01a1\u01a2\7\\\2\2\u01a2\u01a3\5")
        buf.write("@!\2\u01a3\u01a4\7]\2\2\u01a4\u01a5\5r:\2\u01a5?\3\2\2")
        buf.write("\2\u01a6\u01a7\7\3\2\2\u01a7\u01aa\7\5\2\2\u01a8\u01aa")
        buf.write("\5B\"\2\u01a9\u01a6\3\2\2\2\u01a9\u01a8\3\2\2\2\u01aa")
        buf.write("A\3\2\2\2\u01ab\u01dc\5H%\2\u01ac\u01ad\7\3\2\2\u01ad")
        buf.write("\u01b1\7\30\2\2\u01ae\u01b0\5B\"\2\u01af\u01ae\3\2\2\2")
        buf.write("\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3")
        buf.write("\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4\u01dc")
        buf.write("\7\5\2\2\u01b5\u01b6\7\3\2\2\u01b6\u01ba\7\31\2\2\u01b7")
        buf.write("\u01b9\5B\"\2\u01b8\u01b7\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bd\3")
        buf.write("\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01dc\7\5\2\2\u01be\u01bf")
        buf.write("\7\3\2\2\u01bf\u01c0\7\32\2\2\u01c0\u01c1\5B\"\2\u01c1")
        buf.write("\u01c2\7\5\2\2\u01c2\u01dc\3\2\2\2\u01c3\u01c4\7\3\2\2")
        buf.write("\u01c4\u01c5\7\33\2\2\u01c5\u01c6\5B\"\2\u01c6\u01c7\5")
        buf.write("B\"\2\u01c7\u01c8\7\5\2\2\u01c8\u01dc\3\2\2\2\u01c9\u01ca")
        buf.write("\7\3\2\2\u01ca\u01cb\7\34\2\2\u01cb\u01cc\7\3\2\2\u01cc")
        buf.write("\u01cd\5,\27\2\u01cd\u01ce\7\5\2\2\u01ce\u01cf\5B\"\2")
        buf.write("\u01cf\u01d0\7\5\2\2\u01d0\u01dc\3\2\2\2\u01d1\u01d2\7")
        buf.write("\3\2\2\u01d2\u01d3\7\35\2\2\u01d3\u01d4\7\3\2\2\u01d4")
        buf.write("\u01d5\5,\27\2\u01d5\u01d6\7\5\2\2\u01d6\u01d7\5B\"\2")
        buf.write("\u01d7\u01d8\7\5\2\2\u01d8\u01dc\3\2\2\2\u01d9\u01dc\5")
        buf.write("F$\2\u01da\u01dc\5D#\2\u01db\u01ab\3\2\2\2\u01db\u01ac")
        buf.write("\3\2\2\2\u01db\u01b5\3\2\2\2\u01db\u01be\3\2\2\2\u01db")
        buf.write("\u01c3\3\2\2\2\u01db\u01c9\3\2\2\2\u01db\u01d1\3\2\2\2")
        buf.write("\u01db\u01d9\3\2\2\2\u01db\u01da\3\2\2\2\u01dcC\3\2\2")
        buf.write("\2\u01dd\u01de\7\3\2\2\u01de\u01df\7\36\2\2\u01df\u01e0")
        buf.write("\5J&\2\u01e0\u01e1\5J&\2\u01e1\u01e2\7\5\2\2\u01e2E\3")
        buf.write("\2\2\2\u01e3\u01e4\7\3\2\2\u01e4\u01e5\5\u0080A\2\u01e5")
        buf.write("\u01e6\5f\64\2\u01e6\u01e7\5f\64\2\u01e7\u01e8\7\5\2\2")
        buf.write("\u01e8G\3\2\2\2\u01e9\u01ea\7\3\2\2\u01ea\u01ee\5*\26")
        buf.write("\2\u01eb\u01ed\5J&\2\u01ec\u01eb\3\2\2\2\u01ed\u01f0\3")
        buf.write("\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1")
        buf.write("\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01f2\7\5\2\2\u01f2")
        buf.write("I\3\2\2\2\u01f3\u01f9\7Z\2\2\u01f4\u01f9\7_\2\2\u01f5")
        buf.write("\u01f9\7^\2\2\u01f6\u01f9\7\37\2\2\u01f7\u01f9\5L\'\2")
        buf.write("\u01f8\u01f3\3\2\2\2\u01f8\u01f4\3\2\2\2\u01f8\u01f5\3")
        buf.write("\2\2\2\u01f8\u01f6\3\2\2\2\u01f8\u01f7\3\2\2\2\u01f9K")
        buf.write("\3\2\2\2\u01fa\u01fb\7\3\2\2\u01fb\u01ff\5\"\22\2\u01fc")
        buf.write("\u01fe\5J&\2\u01fd\u01fc\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff")
        buf.write("\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2")
        buf.write("\u0201\u01ff\3\2\2\2\u0202\u0203\7\5\2\2\u0203\u0210\3")
        buf.write("\2\2\2\u0204\u0205\7\3\2\2\u0205\u0206\5z>\2\u0206\u0207")
        buf.write("\5J&\2\u0207\u0208\5J&\2\u0208\u0209\7\5\2\2\u0209\u0210")
        buf.write("\3\2\2\2\u020a\u020b\7\3\2\2\u020b\u020c\5|?\2\u020c\u020d")
        buf.write("\5J&\2\u020d\u020e\7\5\2\2\u020e\u0210\3\2\2\2\u020f\u01fa")
        buf.write("\3\2\2\2\u020f\u0204\3\2\2\2\u020f\u020a\3\2\2\2\u0210")
        buf.write("M\3\2\2\2\u0211\u0212\7\3\2\2\u0212\u0213\7 \2\2\u0213")
        buf.write("\u0214\58\35\2\u0214\u0215\7\24\2\2\u0215\u0216\7\3\2")
        buf.write("\2\u0216\u0217\5,\27\2\u0217\u0218\7\5\2\2\u0218\u0219")
        buf.write("\5P)\2\u0219\u021a\7\5\2\2\u021aO\3\2\2\2\u021b\u021c")
        buf.write("\7\\\2\2\u021c\u021d\5@!\2\u021d\u021e\7]\2\2\u021e\u021f")
        buf.write("\5R*\2\u021fQ\3\2\2\2\u0220\u0221\7\3\2\2\u0221\u0225")
        buf.write("\7\30\2\2\u0222\u0224\5T+\2\u0223\u0222\3\2\2\2\u0224")
        buf.write("\u0227\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0228\3\2\2\2\u0227\u0225\3\2\2\2\u0228\u022b\7")
        buf.write("\5\2\2\u0229\u022b\5T+\2\u022a\u0220\3\2\2\2\u022a\u0229")
        buf.write("\3\2\2\2\u022bS\3\2\2\2\u022c\u022d\7\3\2\2\u022d\u022e")
        buf.write("\5\u0084C\2\u022e\u022f\5L\'\2\u022f\u0230\5h\65\2\u0230")
        buf.write("\u0231\7\5\2\2\u0231U\3\2\2\2\u0232\u0233\7\3\2\2\u0233")
        buf.write("\u0234\7!\2\2\u0234\u0235\58\35\2\u0235\u0236\7\24\2\2")
        buf.write("\u0236\u0237\7\3\2\2\u0237\u0238\5,\27\2\u0238\u0239\7")
        buf.write("\5\2\2\u0239\u023a\5X-\2\u023a\u023b\7\5\2\2\u023b\u0246")
        buf.write("\3\2\2\2\u023c\u023d\7\3\2\2\u023d\u023e\7!\2\2\u023e")
        buf.write("\u023f\58\35\2\u023f\u0240\7\24\2\2\u0240\u0241\7\3\2")
        buf.write("\2\u0241\u0242\7\5\2\2\u0242\u0243\5X-\2\u0243\u0244\7")
        buf.write("\5\2\2\u0244\u0246\3\2\2\2\u0245\u0232\3\2\2\2\u0245\u023c")
        buf.write("\3\2\2\2\u0246W\3\2\2\2\u0247\u0248\7\"\2\2\u0248\u0256")
        buf.write("\5\u0086D\2\u0249\u024d\7\26\2\2\u024a\u024b\7\3\2\2\u024b")
        buf.write("\u024e\7\5\2\2\u024c\u024e\5Z.\2\u024d\u024a\3\2\2\2\u024d")
        buf.write("\u024c\3\2\2\2\u024e\u0256\3\2\2\2\u024f\u0253\7]\2\2")
        buf.write("\u0250\u0251\7\3\2\2\u0251\u0254\7\5\2\2\u0252\u0254\5")
        buf.write("\u008eH\2\u0253\u0250\3\2\2\2\u0253\u0252\3\2\2\2\u0254")
        buf.write("\u0256\3\2\2\2\u0255\u0247\3\2\2\2\u0255\u0249\3\2\2\2")
        buf.write("\u0255\u024f\3\2\2\2\u0256Y\3\2\2\2\u0257\u026a\5\\/\2")
        buf.write("\u0258\u0259\7\3\2\2\u0259\u025d\7\30\2\2\u025a\u025c")
        buf.write("\5Z.\2\u025b\u025a\3\2\2\2\u025c\u025f\3\2\2\2\u025d\u025b")
        buf.write("\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f")
        buf.write("\u025d\3\2\2\2\u0260\u026a\7\5\2\2\u0261\u0262\7\3\2\2")
        buf.write("\u0262\u0263\7\35\2\2\u0263\u0264\7\3\2\2\u0264\u0265")
        buf.write("\5,\27\2\u0265\u0266\7\5\2\2\u0266\u0267\5Z.\2\u0267\u0268")
        buf.write("\7\5\2\2\u0268\u026a\3\2\2\2\u0269\u0257\3\2\2\2\u0269")
        buf.write("\u0258\3\2\2\2\u0269\u0261\3\2\2\2\u026a[\3\2\2\2\u026b")
        buf.write("\u0275\5^\60\2\u026c\u026d\7\3\2\2\u026d\u026f\7#\2\2")
        buf.write("\u026e\u0270\7Z\2\2\u026f\u026e\3\2\2\2\u026f\u0270\3")
        buf.write("\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\5^\60\2\u0272\u0273")
        buf.write("\7\5\2\2\u0273\u0275\3\2\2\2\u0274\u026b\3\2\2\2\u0274")
        buf.write("\u026c\3\2\2\2\u0275]\3\2\2\2\u0276\u0277\7\3\2\2\u0277")
        buf.write("\u0278\7$\2\2\u0278\u0279\5`\61\2\u0279\u027a\5B\"\2\u027a")
        buf.write("\u027b\7\5\2\2\u027b\u0283\3\2\2\2\u027c\u027d\7\3\2\2")
        buf.write("\u027d\u027e\7%\2\2\u027e\u027f\5b\62\2\u027f\u0280\5")
        buf.write("B\"\2\u0280\u0281\7\5\2\2\u0281\u0283\3\2\2\2\u0282\u0276")
        buf.write("\3\2\2\2\u0282\u027c\3\2\2\2\u0283_\3\2\2\2\u0284\u0285")
        buf.write("\t\3\2\2\u0285a\3\2\2\2\u0286\u0287\7(\2\2\u0287c\3\2")
        buf.write("\2\2\u0288\u0289\7\3\2\2\u0289\u028a\7)\2\2\u028a\u028b")
        buf.write("\5,\27\2\u028b\u028c\5B\"\2\u028c\u028d\7\5\2\2\u028d")
        buf.write("e\3\2\2\2\u028e\u0292\5L\'\2\u028f\u0292\7_\2\2\u0290")
        buf.write("\u0292\7^\2\2\u0291\u028e\3\2\2\2\u0291\u028f\3\2\2\2")
        buf.write("\u0291\u0290\3\2\2\2\u0292g\3\2\2\2\u0293\u0294\7\3\2")
        buf.write("\2\u0294\u0295\7*\2\2\u0295\u0296\5j\66\2\u0296\u0297")
        buf.write("\7\5\2\2\u0297\u02a3\3\2\2\2\u0298\u0299\7\3\2\2\u0299")
        buf.write("\u029a\7*\2\2\u029a\u029b\5l\67\2\u029b\u029c\7\5\2\2")
        buf.write("\u029c\u02a3\3\2\2\2\u029d\u029e\7\3\2\2\u029e\u029f\7")
        buf.write("*\2\2\u029f\u02a0\5n8\2\u02a0\u02a1\7\5\2\2\u02a1\u02a3")
        buf.write("\3\2\2\2\u02a2\u0293\3\2\2\2\u02a2\u0298\3\2\2\2\u02a2")
        buf.write("\u029d\3\2\2\2\u02a3i\3\2\2\2\u02a4\u02a5\5L\'\2\u02a5")
        buf.write("\u02a6\7\37\2\2\u02a6\u02aa\3\2\2\2\u02a7\u02a8\7\37\2")
        buf.write("\2\u02a8\u02aa\5L\'\2\u02a9\u02a4\3\2\2\2\u02a9\u02a7")
        buf.write("\3\2\2\2\u02aak\3\2\2\2\u02ab\u02ac\7_\2\2\u02ac\u02b0")
        buf.write("\7\37\2\2\u02ad\u02ae\7\37\2\2\u02ae\u02b0\7_\2\2\u02af")
        buf.write("\u02ab\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0m\3\2\2\2\u02b1")
        buf.write("\u02b2\7^\2\2\u02b2\u02b6\7\37\2\2\u02b3\u02b4\7\37\2")
        buf.write("\2\u02b4\u02b6\7^\2\2\u02b5\u02b1\3\2\2\2\u02b5\u02b3")
        buf.write("\3\2\2\2\u02b6o\3\2\2\2\u02b7\u02b8\7\3\2\2\u02b8\u02bc")
        buf.write("\5\"\22\2\u02b9\u02bb\5J&\2\u02ba\u02b9\3\2\2\2\u02bb")
        buf.write("\u02be\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2")
        buf.write("\u02bd\u02bf\3\2\2\2\u02be\u02bc\3\2\2\2\u02bf\u02c0\7")
        buf.write("\5\2\2\u02c0q\3\2\2\2\u02c1\u02c2\7\3\2\2\u02c2\u02c6")
        buf.write("\7\30\2\2\u02c3\u02c5\5t;\2\u02c4\u02c3\3\2\2\2\u02c5")
        buf.write("\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02c9\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c9\u02cc\7")
        buf.write("\5\2\2\u02ca\u02cc\5t;\2\u02cb\u02c1\3\2\2\2\u02cb\u02ca")
        buf.write("\3\2\2\2\u02ccs\3\2\2\2\u02cd\u02ce\7\3\2\2\u02ce\u02cf")
        buf.write("\7\35\2\2\u02cf\u02d0\7\3\2\2\u02d0\u02d1\5,\27\2\u02d1")
        buf.write("\u02d2\7\5\2\2\u02d2\u02d3\5r:\2\u02d3\u02d4\7\5\2\2\u02d4")
        buf.write("\u02dd\3\2\2\2\u02d5\u02d6\7\3\2\2\u02d6\u02d7\7+\2\2")
        buf.write("\u02d7\u02d8\5B\"\2\u02d8\u02d9\5x=\2\u02d9\u02da\7\5")
        buf.write("\2\2\u02da\u02dd\3\2\2\2\u02db\u02dd\5v<\2\u02dc\u02cd")
        buf.write("\3\2\2\2\u02dc\u02d5\3\2\2\2\u02dc\u02db\3\2\2\2\u02dd")
        buf.write("u\3\2\2\2\u02de\u02df\7\3\2\2\u02df\u02e0\5\u0082B\2\u02e0")
        buf.write("\u02e1\5L\'\2\u02e1\u02e2\5f\64\2\u02e2\u02e3\7\5\2\2")
        buf.write("\u02e3\u02f7\3\2\2\2\u02e4\u02e5\7\3\2\2\u02e5\u02e6\7")
        buf.write("\32\2\2\u02e6\u02e7\5H%\2\u02e7\u02e8\7\5\2\2\u02e8\u02f7")
        buf.write("\3\2\2\2\u02e9\u02f7\5H%\2\u02ea\u02eb\7\3\2\2\u02eb\u02ec")
        buf.write("\7,\2\2\u02ec\u02ed\5L\'\2\u02ed\u02ee\5J&\2\u02ee\u02ef")
        buf.write("\7\5\2\2\u02ef\u02f7\3\2\2\2\u02f0\u02f1\7\3\2\2\u02f1")
        buf.write("\u02f2\7,\2\2\u02f2\u02f3\5L\'\2\u02f3\u02f4\7-\2\2\u02f4")
        buf.write("\u02f5\7\5\2\2\u02f5\u02f7\3\2\2\2\u02f6\u02de\3\2\2\2")
        buf.write("\u02f6\u02e4\3\2\2\2\u02f6\u02e9\3\2\2\2\u02f6\u02ea\3")
        buf.write("\2\2\2\u02f6\u02f0\3\2\2\2\u02f7w\3\2\2\2\u02f8\u02f9")
        buf.write("\7\3\2\2\u02f9\u02fd\7\30\2\2\u02fa\u02fc\5v<\2\u02fb")
        buf.write("\u02fa\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd\u02fb\3\2\2\2")
        buf.write("\u02fd\u02fe\3\2\2\2\u02fe\u0300\3\2\2\2\u02ff\u02fd\3")
        buf.write("\2\2\2\u0300\u0303\7\5\2\2\u0301\u0303\5v<\2\u0302\u02f8")
        buf.write("\3\2\2\2\u0302\u0301\3\2\2\2\u0303y\3\2\2\2\u0304\u0305")
        buf.write("\t\4\2\2\u0305{\3\2\2\2\u0306\u0307\t\5\2\2\u0307}\3\2")
        buf.write("\2\2\u0308\u0309\t\6\2\2\u0309\177\3\2\2\2\u030a\u030b")
        buf.write("\t\7\2\2\u030b\u0081\3\2\2\2\u030c\u030d\t\b\2\2\u030d")
        buf.write("\u0083\3\2\2\2\u030e\u030f\t\t\2\2\u030f\u0085\3\2\2\2")
        buf.write("\u0310\u0311\7\3\2\2\u0311\u0313\7\30\2\2\u0312\u0314")
        buf.write("\5\u0088E\2\u0313\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315")
        buf.write("\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2")
        buf.write("\u0317\u0318\7\5\2\2\u0318\u031d\3\2\2\2\u0319\u031a\7")
        buf.write("\3\2\2\u031a\u031d\7\5\2\2\u031b\u031d\5\u0088E\2\u031c")
        buf.write("\u0310\3\2\2\2\u031c\u0319\3\2\2\2\u031c\u031b\3\2\2\2")
        buf.write("\u031d\u0087\3\2\2\2\u031e\u031f\7\3\2\2\u031f\u0320\5")
        buf.write("\u008aF\2\u0320\u0321\7@\2\2\u0321\u0322\5\u008cG\2\u0322")
        buf.write("\u0323\7\5\2\2\u0323\u032b\3\2\2\2\u0324\u0325\7\3\2\2")
        buf.write("\u0325\u0326\7$\2\2\u0326\u0327\5`\61\2\u0327\u0328\5")
        buf.write("\u0088E\2\u0328\u0329\7\5\2\2\u0329\u032b\3\2\2\2\u032a")
        buf.write("\u031e\3\2\2\2\u032a\u0324\3\2\2\2\u032b\u0089\3\2\2\2")
        buf.write("\u032c\u032d\t\n\2\2\u032d\u008b\3\2\2\2\u032e\u0331\7")
        buf.write("_\2\2\u032f\u0331\5f\64\2\u0330\u032e\3\2\2\2\u0330\u032f")
        buf.write("\3\2\2\2\u0331\u008d\3\2\2\2\u0332\u0333\7\3\2\2\u0333")
        buf.write("\u0337\7\30\2\2\u0334\u0336\5\u008eH\2\u0335\u0334\3\2")
        buf.write("\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0337\3\2\2\2\u033a")
        buf.write("\u0351\7\5\2\2\u033b\u0351\5\u0090I\2\u033c\u033d\7\3")
        buf.write("\2\2\u033d\u033e\7\35\2\2\u033e\u033f\7\3\2\2\u033f\u0340")
        buf.write("\5,\27\2\u0340\u0341\7\5\2\2\u0341\u0342\5\u008eH\2\u0342")
        buf.write("\u0343\7\5\2\2\u0343\u0351\3\2\2\2\u0344\u0345\7\3\2\2")
        buf.write("\u0345\u0346\7+\2\2\u0346\u0347\5Z.\2\u0347\u0348\5\u0090")
        buf.write("I\2\u0348\u0349\7\5\2\2\u0349\u0351\3\2\2\2\u034a\u034b")
        buf.write("\7\3\2\2\u034b\u034c\5\u0082B\2\u034c\u034d\5p9\2\u034d")
        buf.write("\u034e\5\u0094K\2\u034e\u034f\7\5\2\2\u034f\u0351\3\2")
        buf.write("\2\2\u0350\u0332\3\2\2\2\u0350\u033b\3\2\2\2\u0350\u033c")
        buf.write("\3\2\2\2\u0350\u0344\3\2\2\2\u0350\u034a\3\2\2\2\u0351")
        buf.write("\u008f\3\2\2\2\u0352\u0353\7\3\2\2\u0353\u0354\7$\2\2")
        buf.write("\u0354\u0355\5`\61\2\u0355\u0356\5\u008eH\2\u0356\u0357")
        buf.write("\7\5\2\2\u0357\u0365\3\2\2\2\u0358\u0359\7\3\2\2\u0359")
        buf.write("\u035a\7$\2\2\u035a\u035b\5`\61\2\u035b\u035c\5\u0092")
        buf.write("J\2\u035c\u035d\7\5\2\2\u035d\u0365\3\2\2\2\u035e\u035f")
        buf.write("\7\3\2\2\u035f\u0360\5\u0082B\2\u0360\u0361\5p9\2\u0361")
        buf.write("\u0362\5f\64\2\u0362\u0363\7\5\2\2\u0363\u0365\3\2\2\2")
        buf.write("\u0364\u0352\3\2\2\2\u0364\u0358\3\2\2\2\u0364\u035e\3")
        buf.write("\2\2\2\u0365\u0091\3\2\2\2\u0366\u0367\7\3\2\2\u0367\u0368")
        buf.write("\5\u0082B\2\u0368\u0369\5p9\2\u0369\u036a\5\u0094K\2\u036a")
        buf.write("\u036b\7\5\2\2\u036b\u0093\3\2\2\2\u036c\u0373\7\3\2\2")
        buf.write("\u036d\u036e\5z>\2\u036e\u036f\5\u0094K\2\u036f\u0370")
        buf.write("\5\u0094K\2\u0370\u0374\3\2\2\2\u0371\u0372\7\16\2\2\u0372")
        buf.write("\u0374\5\u0094K\2\u0373\u036d\3\2\2\2\u0373\u0371\3\2")
        buf.write("\2\2\u0374\u0375\3\2\2\2\u0375\u0376\7\5\2\2\u0376\u037a")
        buf.write("\3\2\2\2\u0377\u037a\7@\2\2\u0378\u037a\5f\64\2\u0379")
        buf.write("\u036c\3\2\2\2\u0379\u0377\3\2\2\2\u0379\u0378\3\2\2\2")
        buf.write("\u037a\u0095\3\2\2\2\u037b\u037c\7\3\2\2\u037c\u037d\7")
        buf.write("\4\2\2\u037d\u037e\5\u009aN\2\u037e\u0380\5\u009cO\2\u037f")
        buf.write("\u0381\5\n\6\2\u0380\u037f\3\2\2\2\u0380\u0381\3\2\2\2")
        buf.write("\u0381\u0383\3\2\2\2\u0382\u0384\5\u009eP\2\u0383\u0382")
        buf.write("\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385")
        buf.write("\u0386\5\u00a4S\2\u0386\u038a\5\u00b0Y\2\u0387\u0389\5")
        buf.write("\u0098M\2\u0388\u0387\3\2\2\2\u0389\u038c\3\2\2\2\u038a")
        buf.write("\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3\2\2\2")
        buf.write("\u038c\u038a\3\2\2\2\u038d\u038e\7\5\2\2\u038e\u0097\3")
        buf.write("\2\2\2\u038f\u0393\5\u00b2Z\2\u0390\u0393\5\u00a0Q\2\u0391")
        buf.write("\u0393\5\u00b6\\\2\u0392\u038f\3\2\2\2\u0392\u0390\3\2")
        buf.write("\2\2\u0392\u0391\3\2\2\2\u0393\u0099\3\2\2\2\u0394\u0395")
        buf.write("\7\3\2\2\u0395\u0396\7A\2\2\u0396\u0397\7Z\2\2\u0397\u0398")
        buf.write("\7\5\2\2\u0398\u009b\3\2\2\2\u0399\u039a\7\3\2\2\u039a")
        buf.write("\u039b\7B\2\2\u039b\u039c\7Z\2\2\u039c\u039d\7\5\2\2\u039d")
        buf.write("\u009d\3\2\2\2\u039e\u039f\7\3\2\2\u039f\u03a0\7C\2\2")
        buf.write("\u03a0\u03a1\5\24\13\2\u03a1\u03a2\7\5\2\2\u03a2\u009f")
        buf.write("\3\2\2\2\u03a3\u03a4\7\3\2\2\u03a4\u03a6\7D\2\2\u03a5")
        buf.write("\u03a7\5\u00a2R\2\u03a6\u03a5\3\2\2\2\u03a7\u03a8\3\2")
        buf.write("\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa")
        buf.write("\3\2\2\2\u03aa\u03ab\7\5\2\2\u03ab\u00a1\3\2\2\2\u03ac")
        buf.write("\u03ad\7\3\2\2\u03ad\u03ae\7Z\2\2\u03ae\u03af\7\16\2\2")
        buf.write("\u03af\u03b0\5\16\b\2\u03b0\u03b1\7E\2\2\u03b1\u03b2\7")
        buf.write("_\2\2\u03b2\u03b3\7F\2\2\u03b3\u03b4\7_\2\2\u03b4\u03b5")
        buf.write("\7G\2\2\u03b5\u03b6\7\5\2\2\u03b6\u00a3\3\2\2\2\u03b7")
        buf.write("\u03b8\7\3\2\2\u03b8\u03bc\7H\2\2\u03b9\u03bb\5\u00aa")
        buf.write("V\2\u03ba\u03b9\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03bf\u03c0\7\5\2\2\u03c0\u00a5\3\2\2\2")
        buf.write("\u03c1\u03c5\7Z\2\2\u03c2\u03c5\7_\2\2\u03c3\u03c5\5\u00a8")
        buf.write("U\2\u03c4\u03c1\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4\u03c3")
        buf.write("\3\2\2\2\u03c5\u00a7\3\2\2\2\u03c6\u03c7\7\3\2\2\u03c7")
        buf.write("\u03cb\5\"\22\2\u03c8\u03ca\5\u00a6T\2\u03c9\u03c8\3\2")
        buf.write("\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc")
        buf.write("\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03cf\7\5\2\2\u03cf\u00a9\3\2\2\2\u03d0\u03e4\5\u00ac")
        buf.write("W\2\u03d1\u03d2\7\3\2\2\u03d2\u03d3\7\36\2\2\u03d3\u03d4")
        buf.write("\5\u00a8U\2\u03d4\u03d5\7_\2\2\u03d5\u03d6\7\5\2\2\u03d6")
        buf.write("\u03e4\3\2\2\2\u03d7\u03d8\7\3\2\2\u03d8\u03d9\7$\2\2")
        buf.write("\u03d9\u03da\7_\2\2\u03da\u03db\5\u00acW\2\u03db\u03dc")
        buf.write("\7\5\2\2\u03dc\u03e4\3\2\2\2\u03dd\u03de\7\3\2\2\u03de")
        buf.write("\u03df\7\36\2\2\u03df\u03e0\5\u00a8U\2\u03e0\u03e1\7Z")
        buf.write("\2\2\u03e1\u03e2\7\5\2\2\u03e2\u03e4\3\2\2\2\u03e3\u03d0")
        buf.write("\3\2\2\2\u03e3\u03d1\3\2\2\2\u03e3\u03d7\3\2\2\2\u03e3")
        buf.write("\u03dd\3\2\2\2\u03e4\u00ab\3\2\2\2\u03e5\u03ec\5\u00ae")
        buf.write("X\2\u03e6\u03e7\7\3\2\2\u03e7\u03e8\7\32\2\2\u03e8\u03e9")
        buf.write("\5\u00aeX\2\u03e9\u03ea\7\5\2\2\u03ea\u03ec\3\2\2\2\u03eb")
        buf.write("\u03e5\3\2\2\2\u03eb\u03e6\3\2\2\2\u03ec\u00ad\3\2\2\2")
        buf.write("\u03ed\u03ee\7\3\2\2\u03ee\u03f2\5*\26\2\u03ef\u03f1\5")
        buf.write("\u00a6T\2\u03f0\u03ef\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2")
        buf.write("\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\3\2\2\2")
        buf.write("\u03f4\u03f2\3\2\2\2\u03f5\u03f6\7\5\2\2\u03f6\u00af\3")
        buf.write("\2\2\2\u03f7\u03f8\7\3\2\2\u03f8\u03f9\7I\2\2\u03f9\u03fa")
        buf.write("\5B\"\2\u03fa\u03fb\7\5\2\2\u03fb\u00b1\3\2\2\2\u03fc")
        buf.write("\u03fd\7\3\2\2\u03fd\u03fe\7J\2\2\u03fe\u03ff\5\u00b4")
        buf.write("[\2\u03ff\u0400\7\5\2\2\u0400\u00b3\3\2\2\2\u0401\u0402")
        buf.write("\7\3\2\2\u0402\u0406\7\30\2\2\u0403\u0405\5\u00b4[\2\u0404")
        buf.write("\u0403\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0404\3\2\2\2")
        buf.write("\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2\u0408\u0406\3")
        buf.write("\2\2\2\u0409\u0420\7\5\2\2\u040a\u040b\7\3\2\2\u040b\u040c")
        buf.write("\7\35\2\2\u040c\u040d\7\3\2\2\u040d\u040e\5,\27\2\u040e")
        buf.write("\u040f\7\5\2\2\u040f\u0410\5\u00b4[\2\u0410\u0411\7\5")
        buf.write("\2\2\u0411\u0420\3\2\2\2\u0412\u0413\7\3\2\2\u0413\u0415")
        buf.write("\7#\2\2\u0414\u0416\7Z\2\2\u0415\u0414\3\2\2\2\u0415\u0416")
        buf.write("\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\5\u00bc_\2\u0418")
        buf.write("\u0419\7\5\2\2\u0419\u0420\3\2\2\2\u041a\u041c\5\u00bc")
        buf.write("_\2\u041b\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041b")
        buf.write("\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0420\3\2\2\2\u041f")
        buf.write("\u0401\3\2\2\2\u041f\u040a\3\2\2\2\u041f\u0412\3\2\2\2")
        buf.write("\u041f\u041b\3\2\2\2\u0420\u00b5\3\2\2\2\u0421\u0422\7")
        buf.write("\3\2\2\u0422\u0423\7K\2\2\u0423\u0424\5\u00b8]\2\u0424")
        buf.write("\u0425\5\u00ba^\2\u0425\u0426\7\5\2\2\u0426\u00b7\3\2")
        buf.write("\2\2\u0427\u0428\t\13\2\2\u0428\u00b9\3\2\2\2\u0429\u0430")
        buf.write("\5L\'\2\u042a\u0430\7N\2\2\u042b\u042c\7\3\2\2\u042c\u042d")
        buf.write("\7O\2\2\u042d\u042e\7Z\2\2\u042e\u0430\7\5\2\2\u042f\u0429")
        buf.write("\3\2\2\2\u042f\u042a\3\2\2\2\u042f\u042b\3\2\2\2\u0430")
        buf.write("\u00bb\3\2\2\2\u0431\u0432\7\3\2\2\u0432\u0434\7\30\2")
        buf.write("\2\u0433\u0435\5\u00bc_\2\u0434\u0433\3\2\2\2\u0435\u0436")
        buf.write("\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437\3\2\2\2\u0437")
        buf.write("\u0438\3\2\2\2\u0438\u0439\7\5\2\2\u0439\u0488\3\2\2\2")
        buf.write("\u043a\u043b\7\3\2\2\u043b\u043c\7\35\2\2\u043c\u043d")
        buf.write("\7\3\2\2\u043d\u043e\5,\27\2\u043e\u043f\7\5\2\2\u043f")
        buf.write("\u0440\5\u00bc_\2\u0440\u0441\7\5\2\2\u0441\u0488\3\2")
        buf.write("\2\2\u0442\u0443\7\3\2\2\u0443\u0444\7$\2\2\u0444\u0445")
        buf.write("\7\'\2\2\u0445\u0446\5B\"\2\u0446\u0447\7\5\2\2\u0447")
        buf.write("\u0488\3\2\2\2\u0448\u0449\7\3\2\2\u0449\u044a\7P\2\2")
        buf.write("\u044a\u044b\5B\"\2\u044b\u044c\7\5\2\2\u044c\u0488\3")
        buf.write("\2\2\2\u044d\u044e\7\3\2\2\u044e\u044f\7Q\2\2\u044f\u0450")
        buf.write("\5B\"\2\u0450\u0451\7\5\2\2\u0451\u0488\3\2\2\2\u0452")
        buf.write("\u0453\7\3\2\2\u0453\u0454\7R\2\2\u0454\u0455\7_\2\2\u0455")
        buf.write("\u0456\5B\"\2\u0456\u0457\7\5\2\2\u0457\u0488\3\2\2\2")
        buf.write("\u0458\u0459\7\3\2\2\u0459\u045a\7S\2\2\u045a\u045b\5")
        buf.write("B\"\2\u045b\u045c\7\5\2\2\u045c\u0488\3\2\2\2\u045d\u045e")
        buf.write("\7\3\2\2\u045e\u045f\7T\2\2\u045f\u0460\5B\"\2\u0460\u0461")
        buf.write("\5B\"\2\u0461\u0462\7\5\2\2\u0462\u0488\3\2\2\2\u0463")
        buf.write("\u0464\7\3\2\2\u0464\u0465\7U\2\2\u0465\u0466\5B\"\2\u0466")
        buf.write("\u0467\5B\"\2\u0467\u0468\7\5\2\2\u0468\u0488\3\2\2\2")
        buf.write("\u0469\u046a\7\3\2\2\u046a\u046b\7V\2\2\u046b\u046c\7")
        buf.write("_\2\2\u046c\u046d\5B\"\2\u046d\u046e\5B\"\2\u046e\u046f")
        buf.write("\7\5\2\2\u046f\u0488\3\2\2\2\u0470\u0471\7\3\2\2\u0471")
        buf.write("\u0472\7W\2\2\u0472\u0473\7_\2\2\u0473\u0474\7_\2\2\u0474")
        buf.write("\u0475\5B\"\2\u0475\u0476\7\5\2\2\u0476\u0488\3\2\2\2")
        buf.write("\u0477\u0478\7\3\2\2\u0478\u0479\7X\2\2\u0479\u047a\7")
        buf.write("_\2\2\u047a\u047b\5B\"\2\u047b\u047c\7\5\2\2\u047c\u0488")
        buf.write("\3\2\2\2\u047d\u047e\7\3\2\2\u047e\u0480\7[\2\2\u047f")
        buf.write("\u0481\5\u00a8U\2\u0480\u047f\3\2\2\2\u0481\u0482\3\2")
        buf.write("\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0484")
        buf.write("\3\2\2\2\u0484\u0485\7\5\2\2\u0485\u0488\3\2\2\2\u0486")
        buf.write("\u0488\5B\"\2\u0487\u0431\3\2\2\2\u0487\u043a\3\2\2\2")
        buf.write("\u0487\u0442\3\2\2\2\u0487\u0448\3\2\2\2\u0487\u044d\3")
        buf.write("\2\2\2\u0487\u0452\3\2\2\2\u0487\u0458\3\2\2\2\u0487\u045d")
        buf.write("\3\2\2\2\u0487\u0463\3\2\2\2\u0487\u0469\3\2\2\2\u0487")
        buf.write("\u0470\3\2\2\2\u0487\u0477\3\2\2\2\u0487\u047d\3\2\2\2")
        buf.write("\u0487\u0486\3\2\2\2\u0488\u00bd\3\2\2\2X\u00c0\u00c6")
        buf.write("\u00c9\u00cc\u00cf\u00d2\u00d5\u00da\u00e4\u00f3\u00ff")
        buf.write("\u0103\u0108\u010f\u0113\u011f\u0124\u0128\u012f\u0137")
        buf.write("\u014d\u015c\u0162\u0167\u016a\u016f\u017a\u01a9\u01b1")
        buf.write("\u01ba\u01db\u01ee\u01f8\u01ff\u020f\u0225\u022a\u0245")
        buf.write("\u024d\u0253\u0255\u025d\u0269\u026f\u0274\u0282\u0291")
        buf.write("\u02a2\u02a9\u02af\u02b5\u02bc\u02c6\u02cb\u02dc\u02f6")
        buf.write("\u02fd\u0302\u0315\u031c\u032a\u0330\u0337\u0350\u0364")
        buf.write("\u0373\u0379\u0380\u0383\u038a\u0392\u03a8\u03bc\u03c4")
        buf.write("\u03cb\u03e3\u03eb\u03f2\u0406\u0415\u041d\u041f\u042f")
        buf.write("\u0436\u0482\u0487")
        return buf.getvalue()


class FunctionalStripsParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'('", u"'define'", u"')'", u"':free_functions'", 
                     u"'domain'", u"':requirements'", u"':types'", u"'int'", 
                     u"'float'", u"'number'", u"'object'", u"'-'", u"'either'", 
                     u"':functions'", u"':constants'", u"':predicates'", 
                     u"':action'", u"':parameters'", u"':constraint'", u"':condition'", 
                     u"':event'", u"'and'", u"'or'", u"'not'", u"'imply'", 
                     u"'exists'", u"'forall'", u"'='", u"'#t'", u"':process'", 
                     u"':durative-action'", u"':duration'", u"'preference'", 
                     u"'at'", u"'over'", u"'start'", u"'end'", u"'all'", 
                     u"':derived'", u"'*'", u"'when'", u"'assign'", u"'undefined'", 
                     u"'+'", u"'/'", u"'^'", u"'sin'", u"'cos'", u"'sqrt'", 
                     u"'tan'", u"'acos'", u"'asin'", u"'atan'", u"'>'", 
                     u"'<'", u"'>='", u"'<='", u"'scale-up'", u"'scale-down'", 
                     u"'increase'", u"'decrease'", u"'?duration'", u"'problem'", 
                     u"':domain'", u"':objects'", u"':bounds'", u"'['", 
                     u"'..'", u"']'", u"':init'", u"':goal'", u"':constraints'", 
                     u"':metric'", u"'minimize'", u"'maximize'", u"'(total-time)'", 
                     u"'is-violated'", u"'always'", u"'sometime'", u"'within'", 
                     u"'at-most-once'", u"'sometime-after'", u"'sometime-before'", 
                     u"'always-within'", u"'hold-during'", u"'hold-after'", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"':precondition'", 
                     u"':effect'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"REQUIRE_KEY", 
                      u"NAME", u"EXTNAME", u"PREC_TAG", u"EFF_TAG", u"VARIABLE", 
                      u"NUMBER", u"LINE_COMMENT", u"WHITESPACE", u"DOMAIN", 
                      u"DOMAIN_NAME", u"REQUIREMENTS", u"TYPES", u"EITHER_TYPE", 
                      u"CONSTANTS", u"FUNCTIONS", u"FREE_FUNCTIONS", u"PREDICATES", 
                      u"ACTION", u"CONSTRAINT", u"EVENT", u"GLOBAL_CONSTRAINT", 
                      u"DURATIVE_ACTION", u"PROBLEM", u"PROBLEM_NAME", u"PROBLEM_DOMAIN", 
                      u"OBJECTS", u"INIT", u"FUNC_HEAD", u"PRECONDITION", 
                      u"EFFECT", u"AND_GD", u"OR_GD", u"NOT_GD", u"IMPLY_GD", 
                      u"EXISTS_GD", u"FORALL_GD", u"COMPARISON_GD", u"AND_EFFECT", 
                      u"FORALL_EFFECT", u"WHEN_EFFECT", u"ASSIGN_EFFECT", 
                      u"NOT_EFFECT", u"PRED_HEAD", u"GOAL", u"BINARY_OP", 
                      u"EQUALITY_CON", u"MULTI_OP", u"MINUS_OP", u"UNARY_MINUS", 
                      u"INIT_EQ", u"INIT_AT", u"NOT_PRED_INIT", u"PRED_INST", 
                      u"PROBLEM_CONSTRAINT", u"PROBLEM_METRIC" ]

    RULE_pddlDoc = 0
    RULE_domain = 1
    RULE_free_functionsDef = 2
    RULE_domainName = 3
    RULE_requireDef = 4
    RULE_typesDef = 5
    RULE_numericBuiltinType = 6
    RULE_builtinType = 7
    RULE_nameList = 8
    RULE_typedNameList = 9
    RULE_nameListWithType = 10
    RULE_typename = 11
    RULE_primType = 12
    RULE_functionsDef = 13
    RULE_functionDeclGroup = 14
    RULE_atomicFunctionSkeleton = 15
    RULE_functionSymbol = 16
    RULE_constantsDef = 17
    RULE_predicatesDef = 18
    RULE_atomicFormulaSkeleton = 19
    RULE_predicate = 20
    RULE_typedVariableList = 21
    RULE_variableListWithType = 22
    RULE_structureDef = 23
    RULE_actionDef = 24
    RULE_constraintDef = 25
    RULE_eventDef = 26
    RULE_actionSymbol = 27
    RULE_constraintSymbol = 28
    RULE_eventSymbol = 29
    RULE_actionDefBody = 30
    RULE_precondition = 31
    RULE_goalDesc = 32
    RULE_equality = 33
    RULE_fComp = 34
    RULE_atomicTermFormula = 35
    RULE_term = 36
    RULE_functionTerm = 37
    RULE_processDef = 38
    RULE_processDefBody = 39
    RULE_processEffectList = 40
    RULE_processEffect = 41
    RULE_durativeActionDef = 42
    RULE_daDefBody = 43
    RULE_daGD = 44
    RULE_prefTimedGD = 45
    RULE_timedGD = 46
    RULE_timeSpecifier = 47
    RULE_interval = 48
    RULE_derivedDef = 49
    RULE_fExp = 50
    RULE_processEffectExp = 51
    RULE_processFunctionEff = 52
    RULE_processConstEff = 53
    RULE_processVarEff = 54
    RULE_fHead = 55
    RULE_effect = 56
    RULE_cEffect = 57
    RULE_pEffect = 58
    RULE_condEffect = 59
    RULE_binaryOp = 60
    RULE_unaryBuiltIn = 61
    RULE_multiOp = 62
    RULE_binaryComp = 63
    RULE_assignOp = 64
    RULE_processEffectOp = 65
    RULE_durationConstraint = 66
    RULE_simpleDurationConstraint = 67
    RULE_durOp = 68
    RULE_durValue = 69
    RULE_daEffect = 70
    RULE_timedEffect = 71
    RULE_fAssignDA = 72
    RULE_fExpDA = 73
    RULE_problem = 74
    RULE_problemMeta = 75
    RULE_problemDecl = 76
    RULE_problemDomain = 77
    RULE_objectDecl = 78
    RULE_boundsDecl = 79
    RULE_typeBoundsDefinition = 80
    RULE_init = 81
    RULE_groundTerm = 82
    RULE_groundFunctionTerm = 83
    RULE_initEl = 84
    RULE_nameLiteral = 85
    RULE_groundAtomicFormula = 86
    RULE_goal = 87
    RULE_probConstraints = 88
    RULE_prefConGD = 89
    RULE_metricSpec = 90
    RULE_optimization = 91
    RULE_metricFExp = 92
    RULE_conGD = 93

    ruleNames =  [ "pddlDoc", "domain", "free_functionsDef", "domainName", 
                   "requireDef", "typesDef", "numericBuiltinType", "builtinType", 
                   "nameList", "typedNameList", "nameListWithType", "typename", 
                   "primType", "functionsDef", "functionDeclGroup", "atomicFunctionSkeleton", 
                   "functionSymbol", "constantsDef", "predicatesDef", "atomicFormulaSkeleton", 
                   "predicate", "typedVariableList", "variableListWithType", 
                   "structureDef", "actionDef", "constraintDef", "eventDef", 
                   "actionSymbol", "constraintSymbol", "eventSymbol", "actionDefBody", 
                   "precondition", "goalDesc", "equality", "fComp", "atomicTermFormula", 
                   "term", "functionTerm", "processDef", "processDefBody", 
                   "processEffectList", "processEffect", "durativeActionDef", 
                   "daDefBody", "daGD", "prefTimedGD", "timedGD", "timeSpecifier", 
                   "interval", "derivedDef", "fExp", "processEffectExp", 
                   "processFunctionEff", "processConstEff", "processVarEff", 
                   "fHead", "effect", "cEffect", "pEffect", "condEffect", 
                   "binaryOp", "unaryBuiltIn", "multiOp", "binaryComp", 
                   "assignOp", "processEffectOp", "durationConstraint", 
                   "simpleDurationConstraint", "durOp", "durValue", "daEffect", 
                   "timedEffect", "fAssignDA", "fExpDA", "problem", "problemMeta", 
                   "problemDecl", "problemDomain", "objectDecl", "boundsDecl", 
                   "typeBoundsDefinition", "init", "groundTerm", "groundFunctionTerm", 
                   "initEl", "nameLiteral", "groundAtomicFormula", "goal", 
                   "probConstraints", "prefConGD", "metricSpec", "optimization", 
                   "metricFExp", "conGD" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    REQUIRE_KEY=87
    NAME=88
    EXTNAME=89
    PREC_TAG=90
    EFF_TAG=91
    VARIABLE=92
    NUMBER=93
    LINE_COMMENT=94
    WHITESPACE=95
    DOMAIN=96
    DOMAIN_NAME=97
    REQUIREMENTS=98
    TYPES=99
    EITHER_TYPE=100
    CONSTANTS=101
    FUNCTIONS=102
    FREE_FUNCTIONS=103
    PREDICATES=104
    ACTION=105
    CONSTRAINT=106
    EVENT=107
    GLOBAL_CONSTRAINT=108
    DURATIVE_ACTION=109
    PROBLEM=110
    PROBLEM_NAME=111
    PROBLEM_DOMAIN=112
    OBJECTS=113
    INIT=114
    FUNC_HEAD=115
    PRECONDITION=116
    EFFECT=117
    AND_GD=118
    OR_GD=119
    NOT_GD=120
    IMPLY_GD=121
    EXISTS_GD=122
    FORALL_GD=123
    COMPARISON_GD=124
    AND_EFFECT=125
    FORALL_EFFECT=126
    WHEN_EFFECT=127
    ASSIGN_EFFECT=128
    NOT_EFFECT=129
    PRED_HEAD=130
    GOAL=131
    BINARY_OP=132
    EQUALITY_CON=133
    MULTI_OP=134
    MINUS_OP=135
    UNARY_MINUS=136
    INIT_EQ=137
    INIT_AT=138
    NOT_PRED_INIT=139
    PRED_INST=140
    PROBLEM_CONSTRAINT=141
    PROBLEM_METRIC=142

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PddlDocContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DomainContext,0)


        def problem(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_pddlDoc

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPddlDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPddlDoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPddlDoc(self)
            else:
                return visitor.visitChildren(self)




    def pddlDoc(self):

        localctx = FunctionalStripsParser.PddlDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pddlDoc)
        try:
            self.state = 190
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.domain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 189
                self.problem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainName(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DomainNameContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.RequireDefContext,0)


        def typesDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypesDefContext,0)


        def constantsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstantsDefContext,0)


        def predicatesDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicatesDefContext,0)


        def functionsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionsDefContext,0)


        def free_functionsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.Free_functionsDefContext,0)


        def structureDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.StructureDefContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.StructureDefContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDomain(self)
            else:
                return visitor.visitChildren(self)




    def domain(self):

        localctx = FunctionalStripsParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_domain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(FunctionalStripsParser.T__0)
            self.state = 193
            self.match(FunctionalStripsParser.T__1)
            self.state = 194
            self.domainName()
            self.state = 196
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 195
                self.requireDef()


            self.state = 199
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 198
                self.typesDef()


            self.state = 202
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 201
                self.constantsDef()


            self.state = 205
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 204
                self.predicatesDef()


            self.state = 208
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 207
                self.functionsDef()


            self.state = 211
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 210
                self.free_functionsDef()


            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 213
                self.structureDef()
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 219
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Free_functionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_free_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFree_functionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFree_functionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFree_functionsDef(self)
            else:
                return visitor.visitChildren(self)




    def free_functionsDef(self):

        localctx = FunctionalStripsParser.Free_functionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_free_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(FunctionalStripsParser.T__0)
            self.state = 222
            self.match(FunctionalStripsParser.T__3)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 223
                self.functionDeclGroup()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 229
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_domainName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDomainName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDomainName(self)
            else:
                return visitor.visitChildren(self)




    def domainName(self):

        localctx = FunctionalStripsParser.DomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_domainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(FunctionalStripsParser.T__0)
            self.state = 232
            self.match(FunctionalStripsParser.T__4)
            self.state = 233
            self.match(FunctionalStripsParser.NAME)
            self.state = 234
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequireDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.REQUIRE_KEY)
            else:
                return self.getToken(FunctionalStripsParser.REQUIRE_KEY, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_requireDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterRequireDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitRequireDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitRequireDef(self)
            else:
                return visitor.visitChildren(self)




    def requireDef(self):

        localctx = FunctionalStripsParser.RequireDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_requireDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(FunctionalStripsParser.T__0)
            self.state = 237
            self.match(FunctionalStripsParser.T__5)
            self.state = 239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 238
                self.match(FunctionalStripsParser.REQUIRE_KEY)
                self.state = 241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.REQUIRE_KEY):
                    break

            self.state = 243
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typesDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypesDef(self)
            else:
                return visitor.visitChildren(self)




    def typesDef(self):

        localctx = FunctionalStripsParser.TypesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typesDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(FunctionalStripsParser.T__0)
            self.state = 246
            self.match(FunctionalStripsParser.T__6)
            self.state = 247
            self.typedNameList()
            self.state = 248
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericBuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_numericBuiltinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)


    class FloatContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFloat(self)
            else:
                return visitor.visitChildren(self)


    class NumberContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)



    def numericBuiltinType(self):

        localctx = FunctionalStripsParser.NumericBuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_numericBuiltinType)
        try:
            self.state = 253
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__7]:
                localctx = FunctionalStripsParser.IntegerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.match(FunctionalStripsParser.T__7)

            elif token in [FunctionalStripsParser.T__8]:
                localctx = FunctionalStripsParser.FloatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(FunctionalStripsParser.T__8)

            elif token in [FunctionalStripsParser.T__9]:
                localctx = FunctionalStripsParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.match(FunctionalStripsParser.T__9)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_builtinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.BuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterObjectBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitObjectBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitObjectBuiltin(self)
            else:
                return visitor.visitChildren(self)


    class NumericBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.BuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NumericBuiltinTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumericBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumericBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumericBuiltin(self)
            else:
                return visitor.visitChildren(self)



    def builtinType(self):

        localctx = FunctionalStripsParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_builtinType)
        try:
            self.state = 257
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9]:
                localctx = FunctionalStripsParser.NumericBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 255
                self.numericBuiltinType()

            elif token in [FunctionalStripsParser.T__10]:
                localctx = FunctionalStripsParser.ObjectBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(FunctionalStripsParser.T__10)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NAME)
            else:
                return self.getToken(FunctionalStripsParser.NAME, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNameList(self)
            else:
                return visitor.visitChildren(self)




    def nameList(self):

        localctx = FunctionalStripsParser.NameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.NAME:
                self.state = 259
                self.match(FunctionalStripsParser.NAME)
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typedNameList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedNameListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleNameList(self)
            else:
                return visitor.visitChildren(self)


    class ComplexNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedNameListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)

        def nameListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.NameListWithTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.NameListWithTypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComplexNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComplexNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComplexNameList(self)
            else:
                return visitor.visitChildren(self)



    def typedNameList(self):

        localctx = FunctionalStripsParser.TypedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedNameList)
        try:
            self.state = 273
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.SimpleNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 265
                self.nameList()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ComplexNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 267 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 266
                        self.nameListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 269 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 271
                self.nameList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.theType = None # TypenameContext

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)


        def typename(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypenameContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameListWithType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNameListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNameListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNameListWithType(self)
            else:
                return visitor.visitChildren(self)




    def nameListWithType(self):

        localctx = FunctionalStripsParser.NameListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_nameListWithType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(FunctionalStripsParser.NAME)
            self.state = 276
            self.nameList()
            self.state = 277
            self.match(FunctionalStripsParser.T__11)
            self.state = 278
            localctx.theType = self.typename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PrimTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypename(self)
            else:
                return visitor.visitChildren(self)




    def typename(self):

        localctx = FunctionalStripsParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typename)
        self._la = 0 # Token type
        try:
            self.state = 290
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.match(FunctionalStripsParser.T__0)
                self.state = 281
                self.match(FunctionalStripsParser.T__12)
                self.state = 283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 282
                    self.primType()
                    self.state = 285 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__7) | (1 << FunctionalStripsParser.T__8) | (1 << FunctionalStripsParser.T__9) | (1 << FunctionalStripsParser.T__10))) != 0) or _la==FunctionalStripsParser.NAME):
                        break

                self.state = 287
                self.match(FunctionalStripsParser.T__2)

            elif token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9, FunctionalStripsParser.T__10, FunctionalStripsParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.primType()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def builtinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_primType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPrimType(self)
            else:
                return visitor.visitChildren(self)




    def primType(self):

        localctx = FunctionalStripsParser.PrimTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primType)
        try:
            self.state = 294
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9, FunctionalStripsParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.builtinType()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionsDef(self)
            else:
                return visitor.visitChildren(self)




    def functionsDef(self):

        localctx = FunctionalStripsParser.FunctionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(FunctionalStripsParser.T__0)
            self.state = 297
            self.match(FunctionalStripsParser.T__13)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 298
                self.functionDeclGroup()
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 304
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,0)


        def atomicFunctionSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.AtomicFunctionSkeletonContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.AtomicFunctionSkeletonContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionDeclGroup

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionDeclGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionDeclGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionDeclGroup(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclGroup(self):

        localctx = FunctionalStripsParser.FunctionDeclGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionDeclGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 306
                self.atomicFunctionSkeleton()
                self.state = 309 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.T__0):
                    break

            self.state = 311
            self.match(FunctionalStripsParser.T__11)
            self.state = 312
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFunctionSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicFunctionSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicFunctionSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicFunctionSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicFunctionSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFunctionSkeleton(self):

        localctx = FunctionalStripsParser.AtomicFunctionSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atomicFunctionSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(FunctionalStripsParser.T__0)
            self.state = 315
            self.functionSymbol()
            self.state = 316
            self.typedVariableList()
            self.state = 317
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionSymbol(self)
            else:
                return visitor.visitChildren(self)




    def functionSymbol(self):

        localctx = FunctionalStripsParser.FunctionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constantsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstantsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstantsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstantsDef(self)
            else:
                return visitor.visitChildren(self)




    def constantsDef(self):

        localctx = FunctionalStripsParser.ConstantsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constantsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(FunctionalStripsParser.T__0)
            self.state = 322
            self.match(FunctionalStripsParser.T__14)
            self.state = 323
            self.typedNameList()
            self.state = 324
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFormulaSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.AtomicFormulaSkeletonContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.AtomicFormulaSkeletonContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_predicatesDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPredicatesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPredicatesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPredicatesDef(self)
            else:
                return visitor.visitChildren(self)




    def predicatesDef(self):

        localctx = FunctionalStripsParser.PredicatesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_predicatesDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(FunctionalStripsParser.T__0)
            self.state = 327
            self.match(FunctionalStripsParser.T__15)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 328
                self.atomicFormulaSkeleton()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFormulaSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicFormulaSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicFormulaSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicFormulaSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicFormulaSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFormulaSkeleton(self):

        localctx = FunctionalStripsParser.AtomicFormulaSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_atomicFormulaSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(FunctionalStripsParser.T__0)
            self.state = 337
            self.predicate()
            self.state = 338
            self.typedVariableList()
            self.state = 339
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = FunctionalStripsParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedVariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typedVariableList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexVariableListContext(TypedVariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedVariableListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.VariableListWithTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.VariableListWithTypeContext,i)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComplexVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComplexVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComplexVariableList(self)
            else:
                return visitor.visitChildren(self)


    class SimpleVariableListContext(TypedVariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedVariableListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleVariableList(self)
            else:
                return visitor.visitChildren(self)



    def typedVariableList(self):

        localctx = FunctionalStripsParser.TypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typedVariableList)
        self._la = 0 # Token type
        try:
            self.state = 360
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.SimpleVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.VARIABLE:
                    self.state = 343
                    self.match(FunctionalStripsParser.VARIABLE)
                    self.state = 348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ComplexVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 350 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 349
                        self.variableListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 352 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.VARIABLE:
                    self.state = 354
                    self.match(FunctionalStripsParser.VARIABLE)
                    self.state = 359
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_variableListWithType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableListWithType(self)
            else:
                return visitor.visitChildren(self)




    def variableListWithType(self):

        localctx = FunctionalStripsParser.VariableListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variableListWithType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 362
                self.match(FunctionalStripsParser.VARIABLE)
                self.state = 365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.VARIABLE):
                    break

            self.state = 367
            self.match(FunctionalStripsParser.T__11)
            self.state = 368
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefContext,0)


        def eventDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EventDefContext,0)


        def durativeActionDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurativeActionDefContext,0)


        def derivedDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DerivedDefContext,0)


        def constraintDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstraintDefContext,0)


        def processDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessDefContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_structureDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterStructureDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitStructureDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitStructureDef(self)
            else:
                return visitor.visitChildren(self)




    def structureDef(self):

        localctx = FunctionalStripsParser.StructureDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structureDef)
        try:
            self.state = 376
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self.actionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.eventDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 372
                self.durativeActionDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 373
                self.derivedDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 374
                self.constraintDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 375
                self.processDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionDef(self)
            else:
                return visitor.visitChildren(self)




    def actionDef(self):

        localctx = FunctionalStripsParser.ActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_actionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(FunctionalStripsParser.T__0)
            self.state = 379
            self.match(FunctionalStripsParser.T__16)
            self.state = 380
            self.actionSymbol()
            self.state = 381
            self.match(FunctionalStripsParser.T__17)
            self.state = 382
            self.match(FunctionalStripsParser.T__0)
            self.state = 383
            self.typedVariableList()
            self.state = 384
            self.match(FunctionalStripsParser.T__2)
            self.state = 385
            self.actionDefBody()
            self.state = 386
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstraintSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constraintDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstraintDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstraintDef(self)
            else:
                return visitor.visitChildren(self)




    def constraintDef(self):

        localctx = FunctionalStripsParser.ConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constraintDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(FunctionalStripsParser.T__0)
            self.state = 389
            self.match(FunctionalStripsParser.T__18)
            self.state = 390
            self.constraintSymbol()
            self.state = 391
            self.match(FunctionalStripsParser.T__17)
            self.state = 392
            self.match(FunctionalStripsParser.T__0)
            self.state = 393
            self.typedVariableList()
            self.state = 394
            self.match(FunctionalStripsParser.T__2)
            self.state = 395
            self.match(FunctionalStripsParser.T__19)
            self.state = 396
            self.goalDesc()
            self.state = 397
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EventSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_eventDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEventDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEventDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEventDef(self)
            else:
                return visitor.visitChildren(self)




    def eventDef(self):

        localctx = FunctionalStripsParser.EventDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eventDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(FunctionalStripsParser.T__0)
            self.state = 400
            self.match(FunctionalStripsParser.T__20)
            self.state = 401
            self.eventSymbol()
            self.state = 402
            self.match(FunctionalStripsParser.T__17)
            self.state = 403
            self.match(FunctionalStripsParser.T__0)
            self.state = 404
            self.typedVariableList()
            self.state = 405
            self.match(FunctionalStripsParser.T__2)
            self.state = 406
            self.actionDefBody()
            self.state = 407
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionSymbol(self)
            else:
                return visitor.visitChildren(self)




    def actionSymbol(self):

        localctx = FunctionalStripsParser.ActionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_actionSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(FunctionalStripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constraintSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstraintSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstraintSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstraintSymbol(self)
            else:
                return visitor.visitChildren(self)




    def constraintSymbol(self):

        localctx = FunctionalStripsParser.ConstraintSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constraintSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(FunctionalStripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_eventSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEventSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEventSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEventSymbol(self)
            else:
                return visitor.visitChildren(self)




    def eventSymbol(self):

        localctx = FunctionalStripsParser.EventSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(FunctionalStripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREC_TAG(self):
            return self.getToken(FunctionalStripsParser.PREC_TAG, 0)

        def precondition(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PreconditionContext,0)


        def EFF_TAG(self):
            return self.getToken(FunctionalStripsParser.EFF_TAG, 0)

        def effect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EffectContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionDefBody(self)
            else:
                return visitor.visitChildren(self)




    def actionDefBody(self):

        localctx = FunctionalStripsParser.ActionDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_actionDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(FunctionalStripsParser.PREC_TAG)
            self.state = 416
            self.precondition()
            self.state = 417
            self.match(FunctionalStripsParser.EFF_TAG)
            self.state = 418
            self.effect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreconditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_precondition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PreconditionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterRegularPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitRegularPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitRegularPrecondition(self)
            else:
                return visitor.visitChildren(self)


    class TrivialPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PreconditionContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTrivialPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTrivialPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTrivialPrecondition(self)
            else:
                return visitor.visitChildren(self)



    def precondition(self):

        localctx = FunctionalStripsParser.PreconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_precondition)
        try:
            self.state = 423
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.TrivialPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.match(FunctionalStripsParser.T__0)
                self.state = 421
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.RegularPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_goalDesc

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AndGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAndGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAndGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAndGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class OrGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterOrGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitOrGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitOrGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class EqualityGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def equality(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EqualityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEqualityGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEqualityGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEqualityGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class UniversalGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversalGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversalGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversalGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def fComp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FCompContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComparisonGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComparisonGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComparisonGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class TermGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ExistentialGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterExistentialGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitExistentialGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitExistentialGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class NotGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNotGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNotGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNotGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ImplyGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterImplyGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitImplyGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitImplyGoalDesc(self)
            else:
                return visitor.visitChildren(self)



    def goalDesc(self):

        localctx = FunctionalStripsParser.GoalDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_goalDesc)
        self._la = 0 # Token type
        try:
            self.state = 473
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.TermGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.atomicTermFormula()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.AndGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.match(FunctionalStripsParser.T__0)
                self.state = 427
                self.match(FunctionalStripsParser.T__21)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 428
                    self.goalDesc()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.OrGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.match(FunctionalStripsParser.T__0)
                self.state = 436
                self.match(FunctionalStripsParser.T__22)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 437
                    self.goalDesc()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 443
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.NotGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 444
                self.match(FunctionalStripsParser.T__0)
                self.state = 445
                self.match(FunctionalStripsParser.T__23)
                self.state = 446
                self.goalDesc()
                self.state = 447
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.ImplyGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 449
                self.match(FunctionalStripsParser.T__0)
                self.state = 450
                self.match(FunctionalStripsParser.T__24)
                self.state = 451
                self.goalDesc()
                self.state = 452
                self.goalDesc()
                self.state = 453
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = FunctionalStripsParser.ExistentialGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 455
                self.match(FunctionalStripsParser.T__0)
                self.state = 456
                self.match(FunctionalStripsParser.T__25)
                self.state = 457
                self.match(FunctionalStripsParser.T__0)
                self.state = 458
                self.typedVariableList()
                self.state = 459
                self.match(FunctionalStripsParser.T__2)
                self.state = 460
                self.goalDesc()
                self.state = 461
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = FunctionalStripsParser.UniversalGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 463
                self.match(FunctionalStripsParser.T__0)
                self.state = 464
                self.match(FunctionalStripsParser.T__26)
                self.state = 465
                self.match(FunctionalStripsParser.T__0)
                self.state = 466
                self.typedVariableList()
                self.state = 467
                self.match(FunctionalStripsParser.T__2)
                self.state = 468
                self.goalDesc()
                self.state = 469
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = FunctionalStripsParser.ComparisonGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 471
                self.fComp()
                pass

            elif la_ == 9:
                localctx = FunctionalStripsParser.EqualityGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 472
                self.equality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEquality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEquality(self)
            else:
                return visitor.visitChildren(self)




    def equality(self):

        localctx = FunctionalStripsParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(FunctionalStripsParser.T__0)
            self.state = 476
            self.match(FunctionalStripsParser.T__27)
            self.state = 477
            self.term()
            self.state = 478
            self.term()
            self.state = 479
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryComp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryCompContext,0)


        def fExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FExpContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fComp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFComp(self)
            else:
                return visitor.visitChildren(self)




    def fComp(self):

        localctx = FunctionalStripsParser.FCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fComp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(FunctionalStripsParser.T__0)
            self.state = 482
            self.binaryComp()
            self.state = 483
            self.fExp()
            self.state = 484
            self.fExp()
            self.state = 485
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTermFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicTermFormula

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicTermFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicTermFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicTermFormula(self)
            else:
                return visitor.visitChildren(self)




    def atomicTermFormula(self):

        localctx = FunctionalStripsParser.AtomicTermFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_atomicTermFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(FunctionalStripsParser.T__0)
            self.state = 488
            self.predicate()
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (FunctionalStripsParser.NAME - 88)) | (1 << (FunctionalStripsParser.VARIABLE - 88)) | (1 << (FunctionalStripsParser.NUMBER - 88)))) != 0):
                self.state = 489
                self.term()
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 495
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TermObjectContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermObject(self)
            else:
                return visitor.visitChildren(self)


    class TermTimeStepContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermTimeStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermTimeStep(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermTimeStep(self)
            else:
                return visitor.visitChildren(self)


    class TermFunctionContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class TermVariableContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermVariable(self)
            else:
                return visitor.visitChildren(self)


    class TermNumberContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermNumber(self)
            else:
                return visitor.visitChildren(self)



    def term(self):

        localctx = FunctionalStripsParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_term)
        try:
            self.state = 502
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                localctx = FunctionalStripsParser.TermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.TermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.VARIABLE]:
                localctx = FunctionalStripsParser.TermVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self.match(FunctionalStripsParser.VARIABLE)

            elif token in [FunctionalStripsParser.T__28]:
                localctx = FunctionalStripsParser.TermTimeStepContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 500
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.TermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 501
                self.functionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryBuiltIn(self):
            return self.getTypedRuleContext(FunctionalStripsParser.UnaryBuiltInContext,0)

        def term(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUnaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUnaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUnaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class BinaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryOpContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class GenericFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGenericFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGenericFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGenericFunctionTerm(self)
            else:
                return visitor.visitChildren(self)



    def functionTerm(self):

        localctx = FunctionalStripsParser.FunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionTerm)
        self._la = 0 # Token type
        try:
            self.state = 525
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.GenericFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(FunctionalStripsParser.T__0)
                self.state = 505
                self.functionSymbol()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (FunctionalStripsParser.NAME - 88)) | (1 << (FunctionalStripsParser.VARIABLE - 88)) | (1 << (FunctionalStripsParser.NUMBER - 88)))) != 0):
                    self.state = 506
                    self.term()
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 512
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.BinaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(FunctionalStripsParser.T__0)
                self.state = 515
                self.binaryOp()
                self.state = 516
                self.term()
                self.state = 517
                self.term()
                self.state = 518
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.UnaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self.match(FunctionalStripsParser.T__0)
                self.state = 521
                self.unaryBuiltIn()
                self.state = 522
                self.term()
                self.state = 523
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def processDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessDef(self)
            else:
                return visitor.visitChildren(self)




    def processDef(self):

        localctx = FunctionalStripsParser.ProcessDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_processDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(FunctionalStripsParser.T__0)
            self.state = 528
            self.match(FunctionalStripsParser.T__29)
            self.state = 529
            self.actionSymbol()
            self.state = 530
            self.match(FunctionalStripsParser.T__17)
            self.state = 531
            self.match(FunctionalStripsParser.T__0)
            self.state = 532
            self.typedVariableList()
            self.state = 533
            self.match(FunctionalStripsParser.T__2)
            self.state = 534
            self.processDefBody()
            self.state = 535
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREC_TAG(self):
            return self.getToken(FunctionalStripsParser.PREC_TAG, 0)

        def precondition(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PreconditionContext,0)


        def EFF_TAG(self):
            return self.getToken(FunctionalStripsParser.EFF_TAG, 0)

        def processEffectList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessDefBody(self)
            else:
                return visitor.visitChildren(self)




    def processDefBody(self):

        localctx = FunctionalStripsParser.ProcessDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_processDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(FunctionalStripsParser.PREC_TAG)
            self.state = 538
            self.precondition()
            self.state = 539
            self.match(FunctionalStripsParser.EFF_TAG)
            self.state = 540
            self.processEffectList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessSingleEffectContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ProcessConjunctiveEffectFormulaContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ProcessEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def processEffectList(self):

        localctx = FunctionalStripsParser.ProcessEffectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_processEffectList)
        self._la = 0 # Token type
        try:
            self.state = 552
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ProcessConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.match(FunctionalStripsParser.T__0)
                self.state = 543
                self.match(FunctionalStripsParser.T__21)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 544
                    self.processEffect()
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 550
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ProcessSingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.processEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessAssignEffectContext(ProcessEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffectOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def processEffectExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessAssignEffect(self)
            else:
                return visitor.visitChildren(self)



    def processEffect(self):

        localctx = FunctionalStripsParser.ProcessEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_processEffect)
        try:
            localctx = FunctionalStripsParser.ProcessAssignEffectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(FunctionalStripsParser.T__0)
            self.state = 555
            self.processEffectOp()
            self.state = 556
            self.functionTerm()
            self.state = 557
            self.processEffectExp()
            self.state = 558
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurativeActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def daDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durativeActionDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurativeActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurativeActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurativeActionDef(self)
            else:
                return visitor.visitChildren(self)




    def durativeActionDef(self):

        localctx = FunctionalStripsParser.DurativeActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_durativeActionDef)
        try:
            self.state = 579
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.match(FunctionalStripsParser.T__0)
                self.state = 561
                self.match(FunctionalStripsParser.T__30)
                self.state = 562
                self.actionSymbol()
                self.state = 563
                self.match(FunctionalStripsParser.T__17)
                self.state = 564
                self.match(FunctionalStripsParser.T__0)
                self.state = 565
                self.typedVariableList()
                self.state = 566
                self.match(FunctionalStripsParser.T__2)
                self.state = 567
                self.daDefBody()
                self.state = 568
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(FunctionalStripsParser.T__0)
                self.state = 571
                self.match(FunctionalStripsParser.T__30)
                self.state = 572
                self.actionSymbol()
                self.state = 573
                self.match(FunctionalStripsParser.T__17)
                self.state = 574
                self.match(FunctionalStripsParser.T__0)
                self.state = 575
                self.match(FunctionalStripsParser.T__2)
                self.state = 576
                self.daDefBody()
                self.state = 577
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationConstraint(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurationConstraintContext,0)


        def daGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaDefBody(self)
            else:
                return visitor.visitChildren(self)




    def daDefBody(self):

        localctx = FunctionalStripsParser.DaDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_daDefBody)
        try:
            self.state = 595
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.match(FunctionalStripsParser.T__31)
                self.state = 582
                self.durationConstraint()

            elif token in [FunctionalStripsParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(FunctionalStripsParser.T__19)
                self.state = 587
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self.match(FunctionalStripsParser.T__0)
                    self.state = 585
                    self.match(FunctionalStripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 586
                    self.daGD()
                    pass



            elif token in [FunctionalStripsParser.EFF_TAG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.match(FunctionalStripsParser.EFF_TAG)
                self.state = 593
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 590
                    self.match(FunctionalStripsParser.T__0)
                    self.state = 591
                    self.match(FunctionalStripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 592
                    self.daEffect()
                    pass



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefTimedGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefTimedGDContext,0)


        def daGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.DaGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaGD(self)
            else:
                return visitor.visitChildren(self)




    def daGD(self):

        localctx = FunctionalStripsParser.DaGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_daGD)
        self._la = 0 # Token type
        try:
            self.state = 615
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.prefTimedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.match(FunctionalStripsParser.T__0)
                self.state = 599
                self.match(FunctionalStripsParser.T__21)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 600
                    self.daGD()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 606
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.match(FunctionalStripsParser.T__0)
                self.state = 608
                self.match(FunctionalStripsParser.T__26)
                self.state = 609
                self.match(FunctionalStripsParser.T__0)
                self.state = 610
                self.typedVariableList()
                self.state = 611
                self.match(FunctionalStripsParser.T__2)
                self.state = 612
                self.daGD()
                self.state = 613
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefTimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timedGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimedGDContext,0)


        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_prefTimedGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPrefTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPrefTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPrefTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def prefTimedGD(self):

        localctx = FunctionalStripsParser.PrefTimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_prefTimedGD)
        self._la = 0 # Token type
        try:
            self.state = 626
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.timedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(FunctionalStripsParser.T__0)
                self.state = 619
                self.match(FunctionalStripsParser.T__32)
                self.state = 621
                _la = self._input.LA(1)
                if _la==FunctionalStripsParser.NAME:
                    self.state = 620
                    self.match(FunctionalStripsParser.NAME)


                self.state = 623
                self.timedGD()
                self.state = 624
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def interval(self):
            return self.getTypedRuleContext(FunctionalStripsParser.IntervalContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timedGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def timedGD(self):

        localctx = FunctionalStripsParser.TimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_timedGD)
        try:
            self.state = 640
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.match(FunctionalStripsParser.T__0)
                self.state = 629
                self.match(FunctionalStripsParser.T__33)
                self.state = 630
                self.timeSpecifier()
                self.state = 631
                self.goalDesc()
                self.state = 632
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(FunctionalStripsParser.T__0)
                self.state = 635
                self.match(FunctionalStripsParser.T__34)
                self.state = 636
                self.interval()
                self.state = 637
                self.goalDesc()
                self.state = 638
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def timeSpecifier(self):

        localctx = FunctionalStripsParser.TimeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_timeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__35 or _la==FunctionalStripsParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = FunctionalStripsParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(FunctionalStripsParser.T__37)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerivedDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_derivedDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDerivedDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDerivedDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDerivedDef(self)
            else:
                return visitor.visitChildren(self)




    def derivedDef(self):

        localctx = FunctionalStripsParser.DerivedDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_derivedDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(FunctionalStripsParser.T__0)
            self.state = 647
            self.match(FunctionalStripsParser.T__38)
            self.state = 648
            self.typedVariableList()
            self.state = 649
            self.goalDesc()
            self.state = 650
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionExpr(self)
            else:
                return visitor.visitChildren(self)


    class NumericConstantExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumericConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumericConstantExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumericConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableExpr(self)
            else:
                return visitor.visitChildren(self)



    def fExp(self):

        localctx = FunctionalStripsParser.FExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fExp)
        try:
            self.state = 655
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.FunctionExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.functionTerm()

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.NumericConstantExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.VARIABLE]:
                localctx = FunctionalStripsParser.VariableExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.match(FunctionalStripsParser.VARIABLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processFunctionEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessFunctionEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionalProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionalProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionalProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class ConstProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processConstEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessConstEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processVarEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessVarEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)



    def processEffectExp(self):

        localctx = FunctionalStripsParser.ProcessEffectExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_processEffectExp)
        try:
            self.state = 672
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.FunctionalProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.match(FunctionalStripsParser.T__0)
                self.state = 658
                self.match(FunctionalStripsParser.T__39)
                self.state = 659
                self.processFunctionEff()
                self.state = 660
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ConstProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(FunctionalStripsParser.T__0)
                self.state = 663
                self.match(FunctionalStripsParser.T__39)
                self.state = 664
                self.processConstEff()
                self.state = 665
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.VariableProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.match(FunctionalStripsParser.T__0)
                self.state = 668
                self.match(FunctionalStripsParser.T__39)
                self.state = 669
                self.processVarEff()
                self.state = 670
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessFunctionEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processFunctionEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessFunctionEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessFunctionEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessFunctionEff(self)
            else:
                return visitor.visitChildren(self)




    def processFunctionEff(self):

        localctx = FunctionalStripsParser.ProcessFunctionEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_processFunctionEff)
        try:
            self.state = 679
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.functionTerm()
                self.state = 675
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.match(FunctionalStripsParser.T__28)
                self.state = 678
                self.functionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessConstEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processConstEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessConstEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessConstEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessConstEff(self)
            else:
                return visitor.visitChildren(self)




    def processConstEff(self):

        localctx = FunctionalStripsParser.ProcessConstEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_processConstEff)
        try:
            self.state = 685
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 682
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.match(FunctionalStripsParser.T__28)
                self.state = 684
                self.match(FunctionalStripsParser.NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessVarEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processVarEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessVarEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessVarEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessVarEff(self)
            else:
                return visitor.visitChildren(self)




    def processVarEff(self):

        localctx = FunctionalStripsParser.ProcessVarEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_processVarEff)
        try:
            self.state = 691
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.VARIABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.match(FunctionalStripsParser.VARIABLE)
                self.state = 688
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.match(FunctionalStripsParser.T__28)
                self.state = 690
                self.match(FunctionalStripsParser.VARIABLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFHead(self)
            else:
                return visitor.visitChildren(self)




    def fHead(self):

        localctx = FunctionalStripsParser.FHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(FunctionalStripsParser.T__0)
            self.state = 694
            self.functionSymbol()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (FunctionalStripsParser.NAME - 88)) | (1 << (FunctionalStripsParser.VARIABLE - 88)) | (1 << (FunctionalStripsParser.NUMBER - 88)))) != 0):
                self.state = 695
                self.term()
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 701
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_effect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleEffectContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.EffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.CEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveEffectFormulaContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.EffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.CEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.CEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def effect(self):

        localctx = FunctionalStripsParser.EffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_effect)
        self._la = 0 # Token type
        try:
            self.state = 713
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self.match(FunctionalStripsParser.T__0)
                self.state = 704
                self.match(FunctionalStripsParser.T__21)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 705
                    self.cEffect()
                    self.state = 710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 711
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.SingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.cEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_cEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConditionalEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)

        def condEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.CondEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleEffect(self)
            else:
                return visitor.visitChildren(self)


    class UniversallyQuantifiedEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def effect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversallyQuantifiedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversallyQuantifiedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversallyQuantifiedEffect(self)
            else:
                return visitor.visitChildren(self)



    def cEffect(self):

        localctx = FunctionalStripsParser.CEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cEffect)
        try:
            self.state = 730
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.UniversallyQuantifiedEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 715
                self.match(FunctionalStripsParser.T__0)
                self.state = 716
                self.match(FunctionalStripsParser.T__26)
                self.state = 717
                self.match(FunctionalStripsParser.T__0)
                self.state = 718
                self.typedVariableList()
                self.state = 719
                self.match(FunctionalStripsParser.T__2)
                self.state = 720
                self.effect()
                self.state = 721
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.match(FunctionalStripsParser.T__0)
                self.state = 724
                self.match(FunctionalStripsParser.T__40)
                self.state = 725
                self.goalDesc()
                self.state = 726
                self.condEffect()
                self.state = 727
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.SimpleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_pEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignUndefinedContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignUndefined(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignUndefined(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignUndefined(self)
            else:
                return visitor.visitChildren(self)


    class AssertNegationEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssertNegationEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssertNegationEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssertNegationEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssertEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssertEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssertEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssertEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignConstantContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def term(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignConstant(self)
            else:
                return visitor.visitChildren(self)



    def pEffect(self):

        localctx = FunctionalStripsParser.PEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pEffect)
        try:
            self.state = 756
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.AssignEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(FunctionalStripsParser.T__0)
                self.state = 733
                self.assignOp()
                self.state = 734
                self.functionTerm()
                self.state = 735
                self.fExp()
                self.state = 736
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.AssertNegationEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(FunctionalStripsParser.T__0)
                self.state = 739
                self.match(FunctionalStripsParser.T__23)
                self.state = 740
                self.atomicTermFormula()
                self.state = 741
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.AssertEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.atomicTermFormula()
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.AssignConstantContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                self.match(FunctionalStripsParser.T__0)
                self.state = 745
                self.match(FunctionalStripsParser.T__41)
                self.state = 746
                self.functionTerm()
                self.state = 747
                self.term()
                self.state = 748
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.AssignUndefinedContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 750
                self.match(FunctionalStripsParser.T__0)
                self.state = 751
                self.match(FunctionalStripsParser.T__41)
                self.state = 752
                self.functionTerm()
                self.state = 753
                self.match(FunctionalStripsParser.T__42)
                self.state = 754
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_condEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleConditionalEffectContext(CondEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CondEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSingleConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSingleConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSingleConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class ConjConditionalEffectFormulaContext(CondEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CondEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjConditionalEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjConditionalEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjConditionalEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def condEffect(self):

        localctx = FunctionalStripsParser.CondEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_condEffect)
        self._la = 0 # Token type
        try:
            self.state = 768
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjConditionalEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.match(FunctionalStripsParser.T__0)
                self.state = 759
                self.match(FunctionalStripsParser.T__21)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 760
                    self.pEffect()
                    self.state = 765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 766
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.SingleConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 767
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_binaryOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryOp(self)
            else:
                return visitor.visitChildren(self)




    def binaryOp(self):

        localctx = FunctionalStripsParser.BinaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_binaryOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__11) | (1 << FunctionalStripsParser.T__39) | (1 << FunctionalStripsParser.T__43) | (1 << FunctionalStripsParser.T__44) | (1 << FunctionalStripsParser.T__45))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryBuiltInContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_unaryBuiltIn

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUnaryBuiltIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUnaryBuiltIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUnaryBuiltIn(self)
            else:
                return visitor.visitChildren(self)




    def unaryBuiltIn(self):

        localctx = FunctionalStripsParser.UnaryBuiltInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unaryBuiltIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__11) | (1 << FunctionalStripsParser.T__46) | (1 << FunctionalStripsParser.T__47) | (1 << FunctionalStripsParser.T__48) | (1 << FunctionalStripsParser.T__49) | (1 << FunctionalStripsParser.T__50) | (1 << FunctionalStripsParser.T__51) | (1 << FunctionalStripsParser.T__52))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_multiOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterMultiOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitMultiOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitMultiOp(self)
            else:
                return visitor.visitChildren(self)




    def multiOp(self):

        localctx = FunctionalStripsParser.MultiOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_multiOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__39 or _la==FunctionalStripsParser.T__43):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_binaryComp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryComp(self)
            else:
                return visitor.visitChildren(self)




    def binaryComp(self):

        localctx = FunctionalStripsParser.BinaryCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_binaryComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__27) | (1 << FunctionalStripsParser.T__53) | (1 << FunctionalStripsParser.T__54) | (1 << FunctionalStripsParser.T__55) | (1 << FunctionalStripsParser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignOp(self)
            else:
                return visitor.visitChildren(self)




    def assignOp(self):

        localctx = FunctionalStripsParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__41) | (1 << FunctionalStripsParser.T__57) | (1 << FunctionalStripsParser.T__58) | (1 << FunctionalStripsParser.T__59) | (1 << FunctionalStripsParser.T__60))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessEffectOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessEffectOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessEffectOp(self)
            else:
                return visitor.visitChildren(self)




    def processEffectOp(self):

        localctx = FunctionalStripsParser.ProcessEffectOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_processEffectOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__59 or _la==FunctionalStripsParser.T__60):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDurationConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.SimpleDurationConstraintContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.SimpleDurationConstraintContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def durationConstraint(self):

        localctx = FunctionalStripsParser.DurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_durationConstraint)
        self._la = 0 # Token type
        try:
            self.state = 794
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(FunctionalStripsParser.T__0)
                self.state = 783
                self.match(FunctionalStripsParser.T__21)
                self.state = 785 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 784
                    self.simpleDurationConstraint()
                    self.state = 787 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 789
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.match(FunctionalStripsParser.T__0)
                self.state = 792
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 793
                self.simpleDurationConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurOpContext,0)


        def durValue(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurValueContext,0)


        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def simpleDurationConstraint(self):
            return self.getTypedRuleContext(FunctionalStripsParser.SimpleDurationConstraintContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_simpleDurationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def simpleDurationConstraint(self):

        localctx = FunctionalStripsParser.SimpleDurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simpleDurationConstraint)
        try:
            self.state = 808
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(FunctionalStripsParser.T__0)
                self.state = 797
                self.durOp()
                self.state = 798
                self.match(FunctionalStripsParser.T__61)
                self.state = 799
                self.durValue()
                self.state = 800
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(FunctionalStripsParser.T__0)
                self.state = 803
                self.match(FunctionalStripsParser.T__33)
                self.state = 804
                self.timeSpecifier()
                self.state = 805
                self.simpleDurationConstraint()
                self.state = 806
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurOp(self)
            else:
                return visitor.visitChildren(self)




    def durOp(self):

        localctx = FunctionalStripsParser.DurOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_durOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__27) | (1 << FunctionalStripsParser.T__55) | (1 << FunctionalStripsParser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durValue

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurValue(self)
            else:
                return visitor.visitChildren(self)




    def durValue(self):

        localctx = FunctionalStripsParser.DurValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_durValue)
        try:
            self.state = 814
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.match(FunctionalStripsParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def daEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.DaEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,i)


        def timedEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimedEffectContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def daGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daEffect

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaEffect(self)
            else:
                return visitor.visitChildren(self)




    def daEffect(self):

        localctx = FunctionalStripsParser.DaEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_daEffect)
        self._la = 0 # Token type
        try:
            self.state = 846
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(FunctionalStripsParser.T__0)
                self.state = 817
                self.match(FunctionalStripsParser.T__21)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 818
                    self.daEffect()
                    self.state = 823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 824
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.timedEffect()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 826
                self.match(FunctionalStripsParser.T__0)
                self.state = 827
                self.match(FunctionalStripsParser.T__26)
                self.state = 828
                self.match(FunctionalStripsParser.T__0)
                self.state = 829
                self.typedVariableList()
                self.state = 830
                self.match(FunctionalStripsParser.T__2)
                self.state = 831
                self.daEffect()
                self.state = 832
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 834
                self.match(FunctionalStripsParser.T__0)
                self.state = 835
                self.match(FunctionalStripsParser.T__40)
                self.state = 836
                self.daGD()
                self.state = 837
                self.timedEffect()
                self.state = 838
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 840
                self.match(FunctionalStripsParser.T__0)
                self.state = 841
                self.assignOp()
                self.state = 842
                self.fHead()
                self.state = 843
                self.fExpDA()
                self.state = 844
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,0)


        def fAssignDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FAssignDAContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timedEffect

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimedEffect(self)
            else:
                return visitor.visitChildren(self)




    def timedEffect(self):

        localctx = FunctionalStripsParser.TimedEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_timedEffect)
        try:
            self.state = 866
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.match(FunctionalStripsParser.T__0)
                self.state = 849
                self.match(FunctionalStripsParser.T__33)
                self.state = 850
                self.timeSpecifier()
                self.state = 851
                self.daEffect()
                self.state = 852
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(FunctionalStripsParser.T__0)
                self.state = 855
                self.match(FunctionalStripsParser.T__33)
                self.state = 856
                self.timeSpecifier()
                self.state = 857
                self.fAssignDA()
                self.state = 858
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self.match(FunctionalStripsParser.T__0)
                self.state = 861
                self.assignOp()
                self.state = 862
                self.fHead()
                self.state = 863
                self.fExp()
                self.state = 864
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FAssignDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fAssignDA

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFAssignDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFAssignDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFAssignDA(self)
            else:
                return visitor.visitChildren(self)




    def fAssignDA(self):

        localctx = FunctionalStripsParser.FAssignDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fAssignDA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(FunctionalStripsParser.T__0)
            self.state = 869
            self.assignOp()
            self.state = 870
            self.fHead()
            self.state = 871
            self.fExpDA()
            self.state = 872
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryOpContext,0)


        def fExpDA(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FExpDAContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,i)


        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fExpDA

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFExpDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFExpDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFExpDA(self)
            else:
                return visitor.visitChildren(self)




    def fExpDA(self):

        localctx = FunctionalStripsParser.FExpDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fExpDA)
        try:
            self.state = 887
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(FunctionalStripsParser.T__0)
                self.state = 881
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 875
                    self.binaryOp()
                    self.state = 876
                    self.fExpDA()
                    self.state = 877
                    self.fExpDA()
                    pass

                elif la_ == 2:
                    self.state = 879
                    self.match(FunctionalStripsParser.T__11)
                    self.state = 880
                    self.fExpDA()
                    pass


                self.state = 883
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(FunctionalStripsParser.T__61)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def problemDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemDeclContext,0)


        def problemDomain(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemDomainContext,0)


        def init(self):
            return self.getTypedRuleContext(FunctionalStripsParser.InitContext,0)


        def goal(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.RequireDefContext,0)


        def objectDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ObjectDeclContext,0)


        def problemMeta(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ProblemMetaContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ProblemMetaContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problem

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblem(self)
            else:
                return visitor.visitChildren(self)




    def problem(self):

        localctx = FunctionalStripsParser.ProblemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_problem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(FunctionalStripsParser.T__0)
            self.state = 890
            self.match(FunctionalStripsParser.T__1)
            self.state = 891
            self.problemDecl()
            self.state = 892
            self.problemDomain()
            self.state = 894
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 893
                self.requireDef()


            self.state = 897
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 896
                self.objectDecl()


            self.state = 899
            self.init()
            self.state = 900
            self.goal()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 901
                self.problemMeta()
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemMetaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def probConstraints(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProbConstraintsContext,0)


        def boundsDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BoundsDeclContext,0)


        def metricSpec(self):
            return self.getTypedRuleContext(FunctionalStripsParser.MetricSpecContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemMeta

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemMeta(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemMeta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemMeta(self)
            else:
                return visitor.visitChildren(self)




    def problemMeta(self):

        localctx = FunctionalStripsParser.ProblemMetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_problemMeta)
        try:
            self.state = 912
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.probConstraints()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.boundsDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self.metricSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemDecl(self)
            else:
                return visitor.visitChildren(self)




    def problemDecl(self):

        localctx = FunctionalStripsParser.ProblemDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_problemDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(FunctionalStripsParser.T__0)
            self.state = 915
            self.match(FunctionalStripsParser.T__62)
            self.state = 916
            self.match(FunctionalStripsParser.NAME)
            self.state = 917
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemDomain

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemDomain(self)
            else:
                return visitor.visitChildren(self)




    def problemDomain(self):

        localctx = FunctionalStripsParser.ProblemDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_problemDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(FunctionalStripsParser.T__0)
            self.state = 920
            self.match(FunctionalStripsParser.T__63)
            self.state = 921
            self.match(FunctionalStripsParser.NAME)
            self.state = 922
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_objectDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterObjectDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitObjectDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitObjectDecl(self)
            else:
                return visitor.visitChildren(self)




    def objectDecl(self):

        localctx = FunctionalStripsParser.ObjectDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_objectDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(FunctionalStripsParser.T__0)
            self.state = 925
            self.match(FunctionalStripsParser.T__64)
            self.state = 926
            self.typedNameList()
            self.state = 927
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BoundsDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeBoundsDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TypeBoundsDefinitionContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TypeBoundsDefinitionContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_boundsDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBoundsDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBoundsDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBoundsDecl(self)
            else:
                return visitor.visitChildren(self)




    def boundsDecl(self):

        localctx = FunctionalStripsParser.BoundsDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_boundsDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self.match(FunctionalStripsParser.T__0)
            self.state = 930
            self.match(FunctionalStripsParser.T__65)
            self.state = 932 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 931
                self.typeBoundsDefinition()
                self.state = 934 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.T__0):
                    break

            self.state = 936
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundsDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NumericBuiltinTypeContext,0)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NUMBER)
            else:
                return self.getToken(FunctionalStripsParser.NUMBER, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typeBoundsDefinition

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypeBoundsDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypeBoundsDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypeBoundsDefinition(self)
            else:
                return visitor.visitChildren(self)




    def typeBoundsDefinition(self):

        localctx = FunctionalStripsParser.TypeBoundsDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeBoundsDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(FunctionalStripsParser.T__0)
            self.state = 939
            self.match(FunctionalStripsParser.NAME)
            self.state = 940
            self.match(FunctionalStripsParser.T__11)
            self.state = 941
            self.numericBuiltinType()
            self.state = 942
            self.match(FunctionalStripsParser.T__66)
            self.state = 943
            self.match(FunctionalStripsParser.NUMBER)
            self.state = 944
            self.match(FunctionalStripsParser.T__67)
            self.state = 945
            self.match(FunctionalStripsParser.NUMBER)
            self.state = 946
            self.match(FunctionalStripsParser.T__68)
            self.state = 947
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initEl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.InitElContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.InitElContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = FunctionalStripsParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_init)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(FunctionalStripsParser.T__0)
            self.state = 950
            self.match(FunctionalStripsParser.T__69)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 951
                self.initEl()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GroundTermNumberContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermNumber(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermFunctionContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermObjectContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermObject(self)
            else:
                return visitor.visitChildren(self)



    def groundTerm(self):

        localctx = FunctionalStripsParser.GroundTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_groundTerm)
        try:
            self.state = 962
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                localctx = FunctionalStripsParser.GroundTermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.GroundTermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.GroundTermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 961
                self.groundFunctionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundFunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundFunctionTerm

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundFunctionTerm(self)
            else:
                return visitor.visitChildren(self)




    def groundFunctionTerm(self):

        localctx = FunctionalStripsParser.GroundFunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_groundFunctionTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(FunctionalStripsParser.T__0)
            self.state = 965
            self.functionSymbol()
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.NUMBER:
                self.state = 966
                self.groundTerm()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 972
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitElContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_initEl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameLiteral(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentNumericContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitAssignmentNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitAssignmentNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitAssignmentNumeric(self)
            else:
                return visitor.visitChildren(self)


    class InitTimedLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def nameLiteral(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitTimedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitTimedLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitTimedLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentObjectContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitAssignmentObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitAssignmentObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitAssignmentObject(self)
            else:
                return visitor.visitChildren(self)



    def initEl(self):

        localctx = FunctionalStripsParser.InitElContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_initEl)
        try:
            self.state = 993
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.InitLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.nameLiteral()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.InitAssignmentNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(FunctionalStripsParser.T__0)
                self.state = 976
                self.match(FunctionalStripsParser.T__27)
                self.state = 977
                self.groundFunctionTerm()
                self.state = 978
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 979
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.InitTimedLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.match(FunctionalStripsParser.T__0)
                self.state = 982
                self.match(FunctionalStripsParser.T__33)
                self.state = 983
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 984
                self.nameLiteral()
                self.state = 985
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.InitAssignmentObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                self.match(FunctionalStripsParser.T__0)
                self.state = 988
                self.match(FunctionalStripsParser.T__27)
                self.state = 989
                self.groundFunctionTerm()
                self.state = 990
                self.match(FunctionalStripsParser.NAME)
                self.state = 991
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitNegativeLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NameLiteralContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitNegativeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitNegativeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitNegativeLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitPositiveLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NameLiteralContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitPositiveLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitPositiveLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitPositiveLiteral(self)
            else:
                return visitor.visitChildren(self)



    def nameLiteral(self):

        localctx = FunctionalStripsParser.NameLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_nameLiteral)
        try:
            self.state = 1001
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.InitPositiveLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.groundAtomicFormula()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.InitNegativeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.match(FunctionalStripsParser.T__0)
                self.state = 997
                self.match(FunctionalStripsParser.T__23)
                self.state = 998
                self.groundAtomicFormula()
                self.state = 999
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundAtomicFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundAtomicFormula

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundAtomicFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundAtomicFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundAtomicFormula(self)
            else:
                return visitor.visitChildren(self)




    def groundAtomicFormula(self):

        localctx = FunctionalStripsParser.GroundAtomicFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_groundAtomicFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(FunctionalStripsParser.T__0)
            self.state = 1004
            self.predicate()
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.NUMBER:
                self.state = 1005
                self.groundTerm()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_goal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGoal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGoal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGoal(self)
            else:
                return visitor.visitChildren(self)




    def goal(self):

        localctx = FunctionalStripsParser.GoalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_goal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(FunctionalStripsParser.T__0)
            self.state = 1014
            self.match(FunctionalStripsParser.T__70)
            self.state = 1015
            self.goalDesc()
            self.state = 1016
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProbConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_probConstraints

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProbConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProbConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProbConstraints(self)
            else:
                return visitor.visitChildren(self)




    def probConstraints(self):

        localctx = FunctionalStripsParser.ProbConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_probConstraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(FunctionalStripsParser.T__0)
            self.state = 1019
            self.match(FunctionalStripsParser.T__71)
            self.state = 1020
            self.prefConGD()
            self.state = 1021
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_prefConGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniversallyQuantifiedConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def prefConGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversallyQuantifiedConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversallyQuantifiedConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversallyQuantifiedConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PlainConstraintListContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPlainConstraintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPlainConstraintList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPlainConstraintList(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctionOfConstraintsContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def prefConGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PrefConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctionOfConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctionOfConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctionOfConstraints(self)
            else:
                return visitor.visitChildren(self)


    class PreferenceConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,0)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPreferenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPreferenceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPreferenceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def prefConGD(self):

        localctx = FunctionalStripsParser.PrefConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_prefConGD)
        self._la = 0 # Token type
        try:
            self.state = 1053
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctionOfConstraintsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1023
                self.match(FunctionalStripsParser.T__0)
                self.state = 1024
                self.match(FunctionalStripsParser.T__21)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 1025
                    self.prefConGD()
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1031
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.UniversallyQuantifiedConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.match(FunctionalStripsParser.T__0)
                self.state = 1033
                self.match(FunctionalStripsParser.T__26)
                self.state = 1034
                self.match(FunctionalStripsParser.T__0)
                self.state = 1035
                self.typedVariableList()
                self.state = 1036
                self.match(FunctionalStripsParser.T__2)
                self.state = 1037
                self.prefConGD()
                self.state = 1038
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.PreferenceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(FunctionalStripsParser.T__0)
                self.state = 1041
                self.match(FunctionalStripsParser.T__32)
                self.state = 1043
                _la = self._input.LA(1)
                if _la==FunctionalStripsParser.NAME:
                    self.state = 1042
                    self.match(FunctionalStripsParser.NAME)


                self.state = 1045
                self.conGD()
                self.state = 1046
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.PlainConstraintListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1049 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1048
                        self.conGD()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1051 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_metricSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProblemMetricContext(MetricSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricSpecContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def optimization(self):
            return self.getTypedRuleContext(FunctionalStripsParser.OptimizationContext,0)

        def metricFExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.MetricFExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricSpec(self):

        localctx = FunctionalStripsParser.MetricSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_metricSpec)
        try:
            localctx = FunctionalStripsParser.ProblemMetricContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(FunctionalStripsParser.T__0)
            self.state = 1056
            self.match(FunctionalStripsParser.T__72)
            self.state = 1057
            self.optimization()
            self.state = 1058
            self.metricFExp()
            self.state = 1059
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptimizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_optimization

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterOptimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitOptimization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitOptimization(self)
            else:
                return visitor.visitChildren(self)




    def optimization(self):

        localctx = FunctionalStripsParser.OptimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_optimization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__73 or _la==FunctionalStripsParser.T__74):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricFExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_metricFExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalExprContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionalExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionalExpr(self)
            else:
                return visitor.visitChildren(self)


    class IsViolatedMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterIsViolatedMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitIsViolatedMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitIsViolatedMetric(self)
            else:
                return visitor.visitChildren(self)


    class TotalTimeMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTotalTimeMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTotalTimeMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTotalTimeMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricFExp(self):

        localctx = FunctionalStripsParser.MetricFExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_metricFExp)
        try:
            self.state = 1069
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.FunctionalExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.functionTerm()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.TotalTimeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(FunctionalStripsParser.T__75)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.IsViolatedMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(FunctionalStripsParser.T__0)
                self.state = 1066
                self.match(FunctionalStripsParser.T__76)
                self.state = 1067
                self.match(FunctionalStripsParser.NAME)
                self.state = 1068
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_conGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForallConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def conGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterForallConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitForallConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitForallConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtEndConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtEndConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtEndConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtEndConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctiveConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctiveConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctiveConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class WithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class HoldAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterHoldAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitHoldAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitHoldAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeBeforeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeBeforeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeBeforeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeBeforeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ExtensionalConstraintGDContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)
        def groundFunctionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundFunctionTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterExtensionalConstraintGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitExtensionalConstraintGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitExtensionalConstraintGD(self)
            else:
                return visitor.visitChildren(self)


    class HoldDuringConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NUMBER)
            else:
                return self.getToken(FunctionalStripsParser.NUMBER, i)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterHoldDuringConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitHoldDuringConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitHoldDuringConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysWithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlwaysWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlwaysWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlwaysWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlternativeAlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlternativeAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlternativeAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlternativeAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtMostOnceConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtMostOnceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtMostOnceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtMostOnceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def conGD(self):

        localctx = FunctionalStripsParser.ConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_conGD)
        self._la = 0 # Token type
        try:
            self.state = 1157
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctiveConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.match(FunctionalStripsParser.T__0)
                self.state = 1072
                self.match(FunctionalStripsParser.T__21)
                self.state = 1074 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1073
                    self.conGD()
                    self.state = 1076 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 1078
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ForallConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(FunctionalStripsParser.T__0)
                self.state = 1081
                self.match(FunctionalStripsParser.T__26)
                self.state = 1082
                self.match(FunctionalStripsParser.T__0)
                self.state = 1083
                self.typedVariableList()
                self.state = 1084
                self.match(FunctionalStripsParser.T__2)
                self.state = 1085
                self.conGD()
                self.state = 1086
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.AtEndConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1088
                self.match(FunctionalStripsParser.T__0)
                self.state = 1089
                self.match(FunctionalStripsParser.T__33)
                self.state = 1090
                self.match(FunctionalStripsParser.T__36)
                self.state = 1091
                self.goalDesc()
                self.state = 1092
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.AlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                self.match(FunctionalStripsParser.T__0)
                self.state = 1095
                self.match(FunctionalStripsParser.T__77)
                self.state = 1096
                self.goalDesc()
                self.state = 1097
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.SometimeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1099
                self.match(FunctionalStripsParser.T__0)
                self.state = 1100
                self.match(FunctionalStripsParser.T__78)
                self.state = 1101
                self.goalDesc()
                self.state = 1102
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = FunctionalStripsParser.WithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1104
                self.match(FunctionalStripsParser.T__0)
                self.state = 1105
                self.match(FunctionalStripsParser.T__79)
                self.state = 1106
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1107
                self.goalDesc()
                self.state = 1108
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = FunctionalStripsParser.AtMostOnceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1110
                self.match(FunctionalStripsParser.T__0)
                self.state = 1111
                self.match(FunctionalStripsParser.T__80)
                self.state = 1112
                self.goalDesc()
                self.state = 1113
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = FunctionalStripsParser.SometimeAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1115
                self.match(FunctionalStripsParser.T__0)
                self.state = 1116
                self.match(FunctionalStripsParser.T__81)
                self.state = 1117
                self.goalDesc()
                self.state = 1118
                self.goalDesc()
                self.state = 1119
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 9:
                localctx = FunctionalStripsParser.SometimeBeforeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1121
                self.match(FunctionalStripsParser.T__0)
                self.state = 1122
                self.match(FunctionalStripsParser.T__82)
                self.state = 1123
                self.goalDesc()
                self.state = 1124
                self.goalDesc()
                self.state = 1125
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 10:
                localctx = FunctionalStripsParser.AlwaysWithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1127
                self.match(FunctionalStripsParser.T__0)
                self.state = 1128
                self.match(FunctionalStripsParser.T__83)
                self.state = 1129
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1130
                self.goalDesc()
                self.state = 1131
                self.goalDesc()
                self.state = 1132
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 11:
                localctx = FunctionalStripsParser.HoldDuringConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1134
                self.match(FunctionalStripsParser.T__0)
                self.state = 1135
                self.match(FunctionalStripsParser.T__84)
                self.state = 1136
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1137
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1138
                self.goalDesc()
                self.state = 1139
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 12:
                localctx = FunctionalStripsParser.HoldAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1141
                self.match(FunctionalStripsParser.T__0)
                self.state = 1142
                self.match(FunctionalStripsParser.T__85)
                self.state = 1143
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1144
                self.goalDesc()
                self.state = 1145
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 13:
                localctx = FunctionalStripsParser.ExtensionalConstraintGDContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1147
                self.match(FunctionalStripsParser.T__0)
                self.state = 1148
                self.match(FunctionalStripsParser.EXTNAME)
                self.state = 1150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1149
                    self.groundFunctionTerm()
                    self.state = 1152 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 1154
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 14:
                localctx = FunctionalStripsParser.AlternativeAlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1156
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




